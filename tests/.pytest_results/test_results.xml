<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="4" failures="220" skipped="18" tests="952" time="52.581" timestamp="2024-12-16T23:25:17.074278+03:00" hostname="DESKTOP-IHFRJV0"><testcase classname="tests.test_elements" name="test_text_with_get_text" time="0.014" /><testcase classname="tests.test_visual" name="test_compare_images" time="0.014" /><testcase classname="tests.test_session" name="test_session_init_default_backend" time="0.019" /><testcase classname="tests.elements.test_base" name="test_init" time="0.016" /><testcase classname="tests.test_performance" name="test_start_monitoring" time="0.018" /><testcase classname="tests.test_input" name="test_click_valid_input" time="0.017"><failure message="AssertionError: assert &lt;MagicMock name='mock.click_mouse()' id='2271816793456'&gt; is True&#10; +  where &lt;MagicMock name='mock.click_mouse()' id='2271816793456'&gt; = click(100, 200, 'left')&#10; +    where click = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2791D90&gt;.click">tests\test_input.py:26: in test_click_valid_input
    assert mouse.click(100, 200, "left") is True
E   AssertionError: assert &lt;MagicMock name='mock.click_mouse()' id='2271816793456'&gt; is True
E    +  where &lt;MagicMock name='mock.click_mouse()' id='2271816793456'&gt; = click(100, 200, 'left')
E    +    where click = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2791D90&gt;.click</failure></testcase><testcase classname="tests.test_accessibility" name="test_check_element_alt_text" time="0.015" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_init" time="0.016" /><testcase classname="tests.test_core" name="test_find_element" time="0.025" /><testcase classname="tests.test_session" name="test_session_init_custom_backend" time="0.003" /><testcase classname="tests.test_performance" name="test_stop_monitoring" time="0.108" /><testcase classname="tests.test_elements" name="test_text_without_text" time="0.003" /><testcase classname="tests.test_elements" name="test_location_with_get_location" time="0.006" /><testcase classname="tests.test_accessibility" name="test_check_element_color_contrast" time="0.004" /><testcase classname="tests.test_visual" name="test_find_element" time="0.003" /><testcase classname="tests.test_visual" name="test_wait_for_image" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_orientation" time="0.004" /><testcase classname="tests.test_session" name="test_find_element" time="0.007" /><testcase classname="tests.elements.test_base" name="test_native_element" time="0.005" /><testcase classname="tests.test_elements" name="test_location_without_location" time="0.003" /><testcase classname="tests.test_elements" name="test_size_with_get_size" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_value" time="0.004" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_min_value" time="0.004" /><testcase classname="tests.test_core" name="test_find_element_with_timeout" time="0.008" /><testcase classname="tests.elements.test_base" name="test_session" time="0.005" /><testcase classname="tests.elements.test_base" name="test_get_attribute" time="0.005" /><testcase classname="tests.test_session" name="test_find_element_with_timeout" time="0.009" /><testcase classname="tests.test_elements" name="test_size_without_size" time="0.003" /><testcase classname="tests.test_visual" name="test_verify_visual_state" time="0.004"><failure message="assert 0.8662 &gt; 0.95">tests\test_visual.py:82: in test_verify_visual_state
    assert result['similarity'] &gt; 0.95
E   assert 0.8662 &gt; 0.95</failure></testcase><testcase classname="tests.elements.test_base" name="test_get_property" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_max_value" time="0.004" /><testcase classname="tests.test_accessibility" name="test_check_element_keyboard_accessibility" time="0.005" /><testcase classname="tests.test_accessibility" name="test_check_element_aria_role" time="0.004" /><testcase classname="tests.test_accessibility" name="test_check_application" time="0.006"><failure message="assert 0 &gt; 0&#10; +  where 0 = len([])&#10; +    where [] = &lt;pyui_automation.accessibility.AccessibilityChecker object at 0x000001B3079D4A10&gt;.violations">tests\test_accessibility.py:69: in test_check_application
    assert len(accessibility_checker.violations) &gt; 0
E   assert 0 &gt; 0
E    +  where 0 = len([])
E    +    where [] = &lt;pyui_automation.accessibility.AccessibilityChecker object at 0x000001B3079D4A10&gt;.violations</failure></testcase><testcase classname="tests.elements.test_base" name="test_text" time="0.003" /><testcase classname="tests.test_core" name="test_take_screenshot" time="0.018"><failure message="AttributeError: __array_interface__">tests\test_core.py:114: in test_take_screenshot
    ui_automation.take_screenshot(screenshot_path)
pyui_automation\core\session.py:202: in take_screenshot
    Image.fromarray(screenshot).save(str(save_path))
.venv\Lib\site-packages\PIL\Image.py:3304: in fromarray
    arr = obj.__array_interface__
C:\Program Files\Python312\Lib\unittest\mock.py:660: in __getattr__
    raise AttributeError(name)
E   AttributeError: __array_interface__</failure></testcase><testcase classname="tests.test_elements" name="test_is_enabled_with_current" time="0.004" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_step_size" time="0.004" /><testcase classname="tests.test_session" name="test_find_element_not_found" time="0.007" /><testcase classname="tests.elements.test_base" name="test_location" time="0.004" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_page_size" time="0.003" /><testcase classname="tests.test_elements" name="test_is_enabled_with_get" time="0.004" /><testcase classname="tests.test_elements" name="test_is_enabled_without_enabled" time="0.003" /><testcase classname="tests.elements.test_base" name="test_size" time="0.003" /><testcase classname="tests.test_session" name="test_find_elements" time="0.005" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_is_enabled" time="0.003" /><testcase classname="tests.elements.test_base" name="test_name" time="0.003" /><testcase classname="tests.test_elements" name="test_is_displayed_with_current" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_viewport_size" time="0.003" /><testcase classname="tests.test_input" name="test_click_invalid_button" time="0.005" /><testcase classname="tests.test_session" name="test_find_elements_not_found" time="0.006" /><testcase classname="tests.test_elements" name="test_is_displayed_with_get" time="0.004" /><testcase classname="tests.elements.test_base" name="test_name_fallback" time="0.004" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_viewport_size_not_found" time="0.004" /><testcase classname="tests.test_elements" name="test_is_displayed_without_displayed" time="0.003" /><testcase classname="tests.test_input" name="test_click_invalid_coordinates" time="0.005" /><testcase classname="tests.elements.test_base" name="test_visible" time="0.003" /><testcase classname="tests.test_session" name="test_get_active_window" time="0.007" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_to_valid" time="0.004" /><testcase classname="tests.elements.test_base" name="test_is_displayed" time="0.003" /><testcase classname="tests.test_elements" name="test_click" time="0.004" /><testcase classname="tests.test_input" name="test_click_invalid_coordinates_x" time="0.005"><failure message="AssertionError: Regex pattern did not match.&#10; Regex: 'x must be a number'&#10; Input: 'Coordinates must be numbers'">tests\test_input.py:42: in test_click_invalid_coordinates_x
    mouse.click("invalid", 200)  # type: ignore
pyui_automation\input\mouse.py:59: in click
    raise ValueError("Coordinates must be numbers")
E   ValueError: Coordinates must be numbers

During handling of the above exception, another exception occurred:
tests\test_input.py:41: in test_click_invalid_coordinates_x
    with pytest.raises(ValueError, match="x must be a number"):
E   AssertionError: Regex pattern did not match.
E    Regex: 'x must be a number'
E    Input: 'Coordinates must be numbers'</failure></testcase><testcase classname="tests.test_session" name="test_get_active_window_none" time="0.005" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_to_invalid" time="0.006" /><testcase classname="tests.elements.test_base" name="test_is_enabled" time="0.003" /><testcase classname="tests.test_elements" name="test_right_click" time="0.005" /><testcase classname="tests.elements.test_base" name="test_get_click_point" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_to_start" time="0.004" /><testcase classname="tests.test_elements" name="test_double_click" time="0.003" /><testcase classname="tests.test_session" name="test_init_visual_testing" time="0.008" /><testcase classname="tests.test_visual" name="test_capture_baseline" time="0.005" /><testcase classname="tests.elements.test_base" name="test_get_click_point_no_location" time="0.004" /><testcase classname="tests.test_elements" name="test_hover" time="0.004"><failure message="AssertionError: Expected 'move_to' to be called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:955: in assert_called_once_with
    raise AssertionError(msg)
E   AssertionError: Expected 'move_to' to be called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\test_elements.py:86: in test_hover
    mock_automation.mouse.move_to.assert_called_once_with(10, 20)
E   AssertionError: Expected 'move_to' to be called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_to_end" time="0.003" /><testcase classname="tests.test_visual" name="test_highlight_differences" time="0.002" /><testcase classname="tests.test_session" name="test_capture_screenshot" time="0.005" /><testcase classname="tests.elements.test_base" name="test_click" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_by" time="0.003" /><testcase classname="tests.test_visual" name="test_generate_diff_report" time="0.005"><failure message="cv2.error: OpenCV(4.10.0) D:\a\opencv-python\opencv-python\opencv\modules\imgcodecs\src\loadsave.cpp:708: error: (-2:Unspecified error) could not find a writer for the specified extension in function 'cv::imwrite_'">tests\test_visual.py:112: in test_generate_diff_report
    visual_matcher.generate_diff_report(img1, img2, report_path)
pyui_automation\core\visual.py:191: in generate_diff_report
    cv2.imwrite(output_path, report_img)
E   cv2.error: OpenCV(4.10.0) D:\a\opencv-python\opencv-python\opencv\modules\imgcodecs\src\loadsave.cpp:708: error: (-2:Unspecified error) could not find a writer for the specified extension in function 'cv::imwrite_'</failure></testcase><testcase classname="tests.elements.test_base" name="test_double_click" time="0.004" /><testcase classname="tests.test_accessibility" name="test_generate_report" time="0.007" /><testcase classname="tests.test_input" name="test_click_invalid_coordinates_y" time="0.006"><failure message="AssertionError: Regex pattern did not match.&#10; Regex: 'y must be a number'&#10; Input: 'Coordinates must be numbers'">tests\test_input.py:47: in test_click_invalid_coordinates_y
    mouse.click(100, "invalid")  # type: ignore
pyui_automation\input\mouse.py:59: in click
    raise ValueError("Coordinates must be numbers")
E   ValueError: Coordinates must be numbers

During handling of the above exception, another exception occurred:
tests\test_input.py:46: in test_click_invalid_coordinates_y
    with pytest.raises(ValueError, match="y must be a number"):
E   AssertionError: Regex pattern did not match.
E    Regex: 'y must be a number'
E    Input: 'Coordinates must be numbers'</failure></testcase><testcase classname="tests.test_session" name="test_capture_element_screenshot" time="0.006" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_by_clamped" time="0.005" /><testcase classname="tests.elements.test_base" name="test_right_click" time="0.003" /><testcase classname="tests.test_accessibility" name="test_color_contrast_calculation" time="0.003" /><testcase classname="tests.test_session" name="test_verify_visual_state" time="0.006"><failure message="AttributeError: Element does not support screenshot capture">tests\test_session.py:189: in test_verify_visual_state
    result = mock_session.verify_visual_hash('test_state', mock_element)
pyui_automation\core\session.py:527: in verify_visual_hash
    raise AttributeError("Element does not support screenshot capture")
E   AttributeError: Element does not support screenshot capture</failure></testcase><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_step_forward" time="0.003" /><testcase classname="tests.elements.test_base" name="test_hover" time="0.003" /><testcase classname="tests.test_accessibility" name="test_get_all_elements" time="0.004"><failure message="AssertionError: assert 0 == 1&#10; +  where 0 = len(&lt;MagicMock name='mock.find_elements()' id='1868438923808'&gt;)">tests\test_accessibility.py:92: in test_get_all_elements
    assert len(elements) == 1
E   AssertionError: assert 0 == 1
E    +  where 0 = len(&lt;MagicMock name='mock.find_elements()' id='1868438923808'&gt;)</failure></testcase><testcase classname="tests.elements.test_base" name="test_send_keys_no_interval" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_step_backward" time="0.004" /><testcase classname="tests.elements.test_base" name="test_send_keys_with_interval" time="0.003" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_page_forward" time="0.005" /><testcase classname="tests.elements.test_base" name="test_clear" time="0.006" /><testcase classname="tests.test_performance" name="test_get_cpu_usage" time="0.004" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_scroll_page_backward" time="0.004" /><testcase classname="tests.test_accessibility" name="test_is_interactive" time="0.003" /><testcase classname="tests.test_accessibility" name="test_has_valid_role" time="0.004" /><testcase classname="tests.test_visual" name="test_image_similarity_threshold" time="0.004"><failure message="assert True == False">tests\test_visual.py:123: in test_image_similarity_threshold
    assert result['match'] == False
E   assert True == False</failure></testcase><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_is_at_start" time="0.004" /><testcase classname="tests.test_performance" name="test_get_memory_usage" time="0.006"><failure message="assert 1 == 104857600">tests\test_performance.py:70: in test_get_memory_usage
    assert memory_usage == memory_size
E   assert 1 == 104857600</failure></testcase><testcase classname="tests.elements.test_base" name="test_capture_screenshot_native" time="0.005" /><testcase classname="tests.test_input" name="test_double_click_success" time="0.106"><failure message="AssertionError: assert &lt;MagicMock name='mock.click_mouse()' id='2271817724512'&gt; is True&#10; +  where &lt;MagicMock name='mock.click_mouse()' id='2271817724512'&gt; = double_click(100, 200)&#10; +    where double_click = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2E2AD20&gt;.double_click">tests\test_input.py:51: in test_double_click_success
    assert mouse.double_click(100, 200) is True
E   AssertionError: assert &lt;MagicMock name='mock.click_mouse()' id='2271817724512'&gt; is True
E    +  where &lt;MagicMock name='mock.click_mouse()' id='2271817724512'&gt; = double_click(100, 200)
E    +    where double_click = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2E2AD20&gt;.double_click</failure></testcase><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_is_at_end" time="0.003" /><testcase classname="tests.test_accessibility" name="test_get_element_color_hex" time="0.005" /><testcase classname="tests.test_input" name="test_double_click_first_click_fails" time="0.105"><failure message="AssertionError: assert &lt;MagicMock name='mock.click_mouse()' id='2271817293392'&gt; is False&#10; +  where &lt;MagicMock name='mock.click_mouse()' id='2271817293392'&gt; = double_click(100, 200)&#10; +    where double_click = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2E2B260&gt;.double_click">tests\test_input.py:57: in test_double_click_first_click_fails
    assert mouse.double_click(100, 200) is False
E   AssertionError: assert &lt;MagicMock name='mock.click_mouse()' id='2271817293392'&gt; is False
E    +  where &lt;MagicMock name='mock.click_mouse()' id='2271817293392'&gt; = double_click(100, 200)
E    +    where double_click = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2E2B260&gt;.double_click</failure></testcase><testcase classname="tests.test_visual" name="test_region_of_interest" time="0.003" /><testcase classname="tests.test_visual" name="test_multiple_template_matching" time="0.004"><failure message="AssertionError: assert 15 == 3&#10; +  where 15 = len([{'confidence': 0.82971495, 'location': (20, 19)}, {'confidence': 0.8297148, 'location': (19, 20)}, {'confidence': 1.0...n': (21, 20)}, {'confidence': 0.82971495, 'location': (20, 21)}, {'confidence': 0.82971495, 'location': (40, 39)}, ...])">tests\test_visual.py:144: in test_multiple_template_matching
    assert len(locations) == 3  # Should find all three circles
E   AssertionError: assert 15 == 3
E    +  where 15 = len([{'confidence': 0.82971495, 'location': (20, 19)}, {'confidence': 0.8297148, 'location': (19, 20)}, {'confidence': 1.0...n': (21, 20)}, {'confidence': 0.82971495, 'location': (20, 21)}, {'confidence': 0.82971495, 'location': (40, 39)}, ...])</failure></testcase><testcase classname="tests.elements.test_base" name="test_capture_screenshot_fallback" time="0.007"><failure message="AssertionError: assert False&#10; +  where False = isinstance(&lt;MagicMock name='mock.capture_screenshot()' id='2953955706976'&gt;, &lt;class 'numpy.ndarray'&gt;)&#10; +    where &lt;class 'numpy.ndarray'&gt; = np.ndarray">tests\elements\test_base.py:161: in test_capture_screenshot_fallback
    assert isinstance(cropped, np.ndarray)
E   AssertionError: assert False
E    +  where False = isinstance(&lt;MagicMock name='mock.capture_screenshot()' id='2953955706976'&gt;, &lt;class 'numpy.ndarray'&gt;)
E    +    where &lt;class 'numpy.ndarray'&gt; = np.ndarray</failure></testcase><testcase classname="tests.test_session" name="test_verify_visual_state_with_differences" time="0.006"><failure message="AttributeError: Element does not support screenshot capture">tests\test_session.py:205: in test_verify_visual_state_with_differences
    result = mock_session.verify_visual_hash('test_state', mock_element)
pyui_automation\core\session.py:527: in verify_visual_hash
    raise AttributeError("Element does not support screenshot capture")
E   AttributeError: Element does not support screenshot capture</failure></testcase><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_wait_until_value" time="0.004"><failure message="AttributeError: property 'value' of 'ScrollBar' object has no setter">tests\elements\test_scrollbar.py:211: in test_scrollbar_wait_until_value
    with patch.object(scrollbar, 'value', 75.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'ScrollBar' object has no setter</failure></testcase><testcase classname="tests.test_elements" name="test_send_keys" time="0.004" /><testcase classname="tests.test_elements" name="test_get_attribute_with_attribute" time="0.004"><failure message="AssertionError: assert None == 'test_value'&#10; +  where None = get_attribute('test_attr')&#10; +    where get_attribute = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A7198D340&gt;.get_attribute">tests\test_elements.py:95: in test_get_attribute_with_attribute
    assert ui_element.get_attribute("test_attr") == "test_value"
E   AssertionError: assert None == 'test_value'
E    +  where None = get_attribute('test_attr')
E    +    where get_attribute = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A7198D340&gt;.get_attribute</failure></testcase><testcase classname="tests.test_performance" name="test_get_response_time" time="0.006" /><testcase classname="tests.test_performance" name="test_generate_report" time="0.566" /><testcase classname="tests.test_accessibility" name="test_get_element_color_rgb" time="0.004" /><testcase classname="tests.test_core" name="test_keyboard_input" time="0.011" /><testcase classname="tests.test_core" name="test_mouse_click" time="0.111" /><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_wait_until_at_start" time="0.004"><failure message="AttributeError: property 'value' of 'ScrollBar' object has no setter">tests\elements\test_scrollbar.py:228: in test_scrollbar_wait_until_at_start
    with patch.object(scrollbar, 'value', 0.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'ScrollBar' object has no setter</failure></testcase><testcase classname="tests.test_session" name="test_capture_baseline" time="0.007"><failure message="AttributeError: Element does not support screenshot capture">tests\test_session.py:217: in test_capture_baseline
    mock_session.capture_visual_baseline('test_baseline', mock_element)
pyui_automation\core\session.py:503: in capture_visual_baseline
    raise AttributeError("Element does not support screenshot capture")
E   AttributeError: Element does not support screenshot capture</failure></testcase><testcase classname="tests.elements.test_base" name="test_drag_and_drop" time="0.005" /><testcase classname="tests.elements.test_base" name="test_scroll_into_view_native" time="0.003" /><testcase classname="tests.test_accessibility" name="test_get_element_color_named" time="0.180"><failure message="assert (0, 255, 0) == (0, 128, 0)&#10;  &#10;  At index 1 diff: #x1B[0m#x1B[94m255#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m128#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">tests\test_accessibility.py:146: in test_get_element_color_named
    assert bg_color == (0, 128, 0)
E   assert (0, 255, 0) == (0, 128, 0)
E     
E     At index 1 diff: #x1B[0m#x1B[94m255#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m128#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_base" name="test_scroll_into_view_fallback" time="0.003" /><testcase classname="tests.test_elements" name="test_get_attribute_without_attribute" time="0.003" /><testcase classname="tests.elements.test_base" name="test_wait_for_enabled_success" time="0.205" /><testcase classname="tests.test_visual" name="test_visual_tester_init" time="0.004" /><testcase classname="tests.test_elements" name="test_get_property_with_property" time="0.004"><failure message="AssertionError: assert None == 'test_value'&#10; +  where None = get_property('test_prop')&#10; +    where get_property = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A5E00D790&gt;.get_property">tests\test_elements.py:106: in test_get_property_with_property
    assert ui_element.get_property("test_prop") == "test_value"
E   AssertionError: assert None == 'test_value'
E    +  where None = get_property('test_prop')
E    +    where get_property = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A5E00D790&gt;.get_property</failure></testcase><testcase classname="tests.test_visual" name="test_compare_identical_images" time="0.006" /><testcase classname="tests.test_visual" name="test_compare_different_images" time="0.005" /><testcase classname="tests.test_session" name="test_capture_visual_baseline_with_element" time="0.006"><failure message="AttributeError: Element does not support screenshot capture">tests\test_session.py:227: in test_capture_visual_baseline_with_element
    mock_session.capture_visual_baseline("test_baseline", element)
pyui_automation\core\session.py:503: in capture_visual_baseline
    raise AttributeError("Element does not support screenshot capture")
E   AttributeError: Element does not support screenshot capture</failure></testcase><testcase classname="tests.test_elements" name="test_get_property_without_property" time="0.003" /><testcase classname="tests.test_visual" name="test_compare_different_sizes" time="0.004" /><testcase classname="tests.test_elements" name="test_name_with_current_name" time="0.003" /><testcase classname="tests.test_visual" name="test_verify_hash_identical_images" time="0.005" /><testcase classname="tests.test_elements" name="test_name_with_get_name" time="0.003"><failure message="AssertionError: assert &lt;MagicMock name='mock.CurrentName' id='2656175470496'&gt; == 'test_name'&#10; +  where &lt;MagicMock name='mock.CurrentName' id='2656175470496'&gt; = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A706519D0&gt;.name">tests\test_elements.py:127: in test_name_with_get_name
    assert ui_element.name == "test_name"
E   AssertionError: assert &lt;MagicMock name='mock.CurrentName' id='2656175470496'&gt; == 'test_name'
E    +  where &lt;MagicMock name='mock.CurrentName' id='2656175470496'&gt; = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A706519D0&gt;.name</failure></testcase><testcase classname="tests.test_visual" name="test_verify_hash_similar_images" time="0.006"><failure message="AssertionError: assert False == True&#10; +  where False = verify_hash('test_similar.png', array([[[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0...     [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]], dtype=uint8))&#10; +    where verify_hash = &lt;pyui_automation.core.visual.VisualTester object at 0x000001E9CAF6FC80&gt;.verify_hash">tests\test_visual.py:203: in test_verify_hash_similar_images
    assert visual_tester.verify_hash("test_similar.png", img2) == True
E   AssertionError: assert False == True
E    +  where False = verify_hash('test_similar.png', array([[[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0...     [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]], dtype=uint8))
E    +    where verify_hash = &lt;pyui_automation.core.visual.VisualTester object at 0x000001E9CAF6FC80&gt;.verify_hash</failure></testcase><testcase classname="tests.test_elements" name="test_name_without_name" time="0.004"><failure message="AssertionError: assert &lt;MagicMock id='2656195296912'&gt; == ''&#10; +  where &lt;MagicMock id='2656195296912'&gt; = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A7193AA50&gt;.name">tests\test_elements.py:136: in test_name_without_name
    assert ui_element.name == ""
E   AssertionError: assert &lt;MagicMock id='2656195296912'&gt; == ''
E    +  where &lt;MagicMock id='2656195296912'&gt; = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A7193AA50&gt;.name</failure></testcase><testcase classname="tests.test_session" name="test_capture_visual_baseline_full_screen" time="0.005"><failure message="TypeError: AutomationSession.capture_visual_baseline() missing 1 required positional argument: 'name'">tests\test_session.py:238: in test_capture_visual_baseline_full_screen
    mock_session.capture_visual_baseline("test_baseline")
E   TypeError: AutomationSession.capture_visual_baseline() missing 1 required positional argument: 'name'</failure></testcase><testcase classname="tests.elements.test_scrollbar" name="test_scrollbar_wait_until_at_end" time="0.004"><failure message="AttributeError: property 'value' of 'ScrollBar' object has no setter">tests\elements\test_scrollbar.py:242: in test_scrollbar_wait_until_at_end
    with patch.object(scrollbar, 'value', 100.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'ScrollBar' object has no setter</failure></testcase><testcase classname="tests.test_visual" name="test_verify_hash_different_images" time="0.004" /><testcase classname="tests.test_visual" name="test_calculate_phash" time="0.004"><failure message="assert False&#10; +  where False = isinstance(array([[False, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, Fal...se, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False, False]]), str)">tests\test_visual.py:220: in test_calculate_phash
    assert isinstance(hash_value, str)
E   assert False
E    +  where False = isinstance(array([[False, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, Fal...se, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False, False]]), str)</failure></testcase><testcase classname="tests.test_input" name="test_move_valid_coordinates" time="0.004" /><testcase classname="tests.test_elements" name="test_location_with_bounding_rectangle" time="0.004"><failure message="AssertionError: assert &lt;MagicMock na...656195388112'&gt; == (10, 20)&#10;  &#10;  Use -v to get more diff">tests\test_elements.py:143: in test_location_with_bounding_rectangle
    assert ui_element.location == (10, 20)
E   AssertionError: assert &lt;MagicMock na...656195388112'&gt; == (10, 20)
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.test_session" name="test_config_access" time="0.008"><failure message="AssertionError: assert False&#10; +  where False = hasattr(AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}), 'timeout')&#10; +    where AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}) = &lt;pyui_automation.core.session.AutomationSession object at 0x0000025CE3D77770&gt;.config">tests\test_session.py:247: in test_config_access
    assert hasattr(mock_session.config, 'timeout')
E   AssertionError: assert False
E    +  where False = hasattr(AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}), 'timeout')
E    +    where AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}) = &lt;pyui_automation.core.session.AutomationSession object at 0x0000025CE3D77770&gt;.config</failure></testcase><testcase classname="tests.test_input" name="test_move_invalid_coordinates" time="0.003" /><testcase classname="tests.test_input" name="test_drag_success" time="0.305" /><testcase classname="tests.test_elements" name="test_size_with_bounding_rectangle" time="0.004"><failure message="AssertionError: assert &lt;MagicMock na...656195450624'&gt; == (100, 100)&#10;  &#10;  Use -v to get more diff">tests\test_elements.py:150: in test_size_with_bounding_rectangle
    assert ui_element.size == (100, 100)
E   AssertionError: assert &lt;MagicMock na...656195450624'&gt; == (100, 100)
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.test_visual" name="test_compare_images_with_resize" time="0.002" /><testcase classname="tests.test_visual" name="test_compare_images_different_content" time="0.002" /><testcase classname="tests.test_session" name="test_component_access" time="0.007"><failure message="AttributeError: OCR not supported by backend">tests\test_session.py:255: in test_component_access
    assert mock_session.ocr is not None
pyui_automation\core\session.py:589: in ocr
    raise AttributeError('OCR not supported by backend')
E   AttributeError: OCR not supported by backend</failure></testcase><testcase classname="tests.test_visual" name="test_visual_difference_dataclass" time="0.002" /><testcase classname="tests.test_visual" name="test_generate_visual_report_with_empty_differences" time="0.005"><failure message="AssertionError: assert False&#10; +  where False = exists()&#10; +    where exists = WindowsPath('C:/Users/xella/CascadeProjects/windsurf-project/pyui_automation/pytest_temp/popen-gw3/test_generate_visual_report_wi0/empty_report.html').exists">tests\test_visual.py:261: in test_generate_visual_report_with_empty_differences
    assert report_path.exists()
E   AssertionError: assert False
E    +  where False = exists()
E    +    where exists = WindowsPath('C:/Users/xella/CascadeProjects/windsurf-project/pyui_automation/pytest_temp/popen-gw3/test_generate_visual_report_wi0/empty_report.html').exists</failure></testcase><testcase classname="tests.test_core" name="test_wait_until" time="0.009"><failure message="AssertionError: assert &lt;MagicMock name='mock.wait_until()' id='2072442208128'&gt; is True">tests\test_core.py:136: in test_wait_until
    assert result is True
E   AssertionError: assert &lt;MagicMock name='mock.wait_until()' id='2072442208128'&gt; is True</failure></testcase><testcase classname="tests.test_elements" name="test_enabled_with_current_is_enabled" time="0.003"><failure message="assert is_enabled is True&#10; +  where is_enabled = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A7196E4E0&gt;.is_enabled">tests\test_elements.py:157: in test_enabled_with_current_is_enabled
    assert ui_element.is_enabled is True
E   assert is_enabled is True
E    +  where is_enabled = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A7196E4E0&gt;.is_enabled</failure></testcase><testcase classname="tests.test_visual" name="test_generate_visual_report_with_differences" time="0.005"><failure message="AssertionError: assert False&#10; +  where False = exists()&#10; +    where exists = WindowsPath('C:/Users/xella/CascadeProjects/windsurf-project/pyui_automation/pytest_temp/popen-gw3/test_generate_visual_report_wi1/diff_report.html').exists">tests\test_visual.py:282: in test_generate_visual_report_with_differences
    assert report_path.exists()
E   AssertionError: assert False
E    +  where False = exists()
E    +    where exists = WindowsPath('C:/Users/xella/CascadeProjects/windsurf-project/pyui_automation/pytest_temp/popen-gw3/test_generate_visual_report_wi1/diff_report.html').exists</failure></testcase><testcase classname="tests.test_elements" name="test_visible_with_current_is_offscreen" time="0.003" /><testcase classname="tests.test_session" name="test_backend_property" time="0.006" /><testcase classname="tests.backends.test_game_backend" name="test_connect[Windows-True]" time="0.009"><failure message="AssertionError: assert False == True&#10; +  where False = connect('Test Game Window')&#10; +    where connect = &lt;tests.backends.test_game_backend.MockGameBackend object at 0x00000232F240F350&gt;.connect">tests\backends\test_game_backend.py:176: in test_connect
    assert game_backend.connect("Test Game Window") == expected
E   AssertionError: assert False == True
E    +  where False = connect('Test Game Window')
E    +    where connect = &lt;tests.backends.test_game_backend.MockGameBackend object at 0x00000232F240F350&gt;.connect</failure></testcase><testcase classname="tests.test_elements" name="test_click_disabled_element" time="0.003" /><testcase classname="tests.test_elements" name="test_click_invisible_element" time="0.003" /><testcase classname="tests.test_session" name="test_find_element_strategies[id-test-id]" time="0.006" /><testcase classname="tests.test_core" name="test_init_visual_testing" time="0.012" /><testcase classname="tests.test_elements" name="test_type_text_with_interval" time="0.004" /><testcase classname="tests.test_session" name="test_find_element_strategies[name-test-name]" time="0.006" /><testcase classname="tests.test_elements" name="test_clear_with_clear_method" time="0.003" /><testcase classname="tests.test_visual" name="test_capture_baseline_with_invalid_image" time="0.005" /><testcase classname="tests.test_elements" name="test_clear_without_clear_method" time="0.005"><failure message="AssertionError: assert False&#10; +  where False = &lt;MagicMock name='mock.keyboard.press_keys' id='2656195628688'&gt;.called&#10; +    where &lt;MagicMock name='mock.keyboard.press_keys' id='2656195628688'&gt; = &lt;MagicMock name='mock.keyboard' id='2656195504384'&gt;.press_keys&#10; +      where &lt;MagicMock name='mock.keyboard' id='2656195504384'&gt; = &lt;MagicMock id='2656195506784'&gt;.keyboard">tests\test_elements.py:209: in test_clear_without_clear_method
    assert mock_automation.keyboard.press_keys.called
E   AssertionError: assert False
E    +  where False = &lt;MagicMock name='mock.keyboard.press_keys' id='2656195628688'&gt;.called
E    +    where &lt;MagicMock name='mock.keyboard.press_keys' id='2656195628688'&gt; = &lt;MagicMock name='mock.keyboard' id='2656195504384'&gt;.press_keys
E    +      where &lt;MagicMock name='mock.keyboard' id='2656195504384'&gt; = &lt;MagicMock id='2656195506784'&gt;.keyboard</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_connect[Darwin-True]" time="0.004" /><testcase classname="tests.test_core" name="test_capture_visual_baseline" time="0.012"><failure message="NameError: name 'os' is not defined. Did you forget to import 'os'">tests\test_core.py:147: in test_capture_visual_baseline
    result = ui_automation.capture_visual_baseline(element, "test")
pyui_automation\core\session.py:506: in capture_visual_baseline
    baseline_path = os.path.join(self._visual_test_dir, f"{name}_baseline.png")
E   NameError: name 'os' is not defined. Did you forget to import 'os'</failure></testcase><testcase classname="tests.test_session" name="test_find_element_strategies[class-test-class]" time="0.007" /><testcase classname="tests.test_visual" name="test_capture_baseline_with_empty_name" time="0.006" /><testcase classname="tests.backends.test_game_backend" name="test_connect[Linux-True]" time="0.004"><failure message="AssertionError: assert False == True&#10; +  where False = connect('Test Game Window')&#10; +    where connect = &lt;tests.backends.test_game_backend.MockGameBackend object at 0x00000232F2435AF0&gt;.connect">tests\backends\test_game_backend.py:176: in test_connect
    assert game_backend.connect("Test Game Window") == expected
E   AssertionError: assert False == True
E    +  where False = connect('Test Game Window')
E    +    where connect = &lt;tests.backends.test_game_backend.MockGameBackend object at 0x00000232F2435AF0&gt;.connect</failure></testcase><testcase classname="tests.test_session" name="test_find_element_strategies[xpath-//div[@id=&quot;test&quot;]]" time="0.006" /><testcase classname="tests.test_visual" name="test_verify_hash_with_invalid_images" time="0.005" /><testcase classname="tests.test_elements" name="test_get_click_point" time="0.006"><failure message="AssertionError: assert &lt;MagicMock name='mock.location.__getitem__().__add__()' id='2656195382016'&gt; == 60">tests\test_elements.py:217: in test_get_click_point
    assert x == 60  # center x: 10 + (110-10)/2
E   AssertionError: assert &lt;MagicMock name='mock.location.__getitem__().__add__()' id='2656195382016'&gt; == 60</failure></testcase><testcase classname="tests.test_visual" name="test_compare_with_invalid_images" time="0.005" /><testcase classname="tests.test_session" name="test_session_cleanup" time="0.009" /><testcase classname="tests.backends.test_game_backend" name="test_connect_failure" time="0.003" /><testcase classname="tests.test_visual" name="test_calculate_phash_with_invalid_image" time="0.004" /><testcase classname="tests.test_session" name="test_start_performance_monitoring" time="0.006" /><testcase classname="tests.backends.test_game_backend" name="test_capture_screen_with_region" time="0.003"><failure message="TypeError: GameBackend.capture_screen() takes 1 positional argument but 2 were given">tests\backends\test_game_backend.py:188: in test_capture_screen_with_region
    screenshot = game_backend.capture_screen(region)
E   TypeError: GameBackend.capture_screen() takes 1 positional argument but 2 were given</failure></testcase><testcase classname="tests.test_visual" name="test_compare_with_threshold_adjustment" time="0.006" /><testcase classname="tests.test_accessibility" name="test_get_luminance" time="0.002" /><testcase classname="tests.test_accessibility" name="test_check_element_edge_cases" time="0.003" /><testcase classname="tests.backends.test_windows" name="test_init_success" time="0.006"><failure message="TypeError: Can't instantiate abstract class WindowsBackend without an implementation for abstract methods 'attach_to_application', 'close_application', 'close_window', 'generate_accessibility_report', 'get_application', 'get_element_pattern', 'get_element_rect', 'get_element_state', 'get_element_value', 'get_window_bounds', 'invoke_element_pattern_method', 'launch_application', 'press_key', 'release_key', 'resize_window', 'scroll_element', 'send_keys', 'set_element_property', 'set_element_text', 'set_element_value', 'set_window_position', 'wait_for_element', 'wait_for_element_property', 'wait_for_element_state'">tests\backends\test_windows.py:186: in test_init_success
    backend = WindowsBackend()
E   TypeError: Can't instantiate abstract class WindowsBackend without an implementation for abstract methods 'attach_to_application', 'close_application', 'close_window', 'generate_accessibility_report', 'get_application', 'get_element_pattern', 'get_element_rect', 'get_element_state', 'get_element_value', 'get_window_bounds', 'invoke_element_pattern_method', 'launch_application', 'press_key', 'release_key', 'resize_window', 'scroll_element', 'send_keys', 'set_element_property', 'set_element_text', 'set_element_value', 'set_window_position', 'wait_for_element', 'wait_for_element_property', 'wait_for_element_state'</failure></testcase><testcase classname="tests.test_elements" name="test_drag_and_drop" time="0.004"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">tests\test_elements.py:226: in test_drag_and_drop
    ui_element.drag_and_drop(target_element)
pyui_automation\elements\base.py:275: in drag_and_drop
    target_x, target_y = target._get_click_point()
E   ValueError: not enough values to unpack (expected 2, got 0)</failure></testcase><testcase classname="tests.test_visual" name="test_baseline_dir_creation" time="0.005" /><testcase classname="tests.test_accessibility" name="test_check_application_empty" time="0.003" /><testcase classname="tests.test_core" name="test_compare_visual" time="0.011"><failure message="NameError: name 'os' is not defined. Did you forget to import 'os'">tests\test_core.py:154: in test_compare_visual
    result, diff = ui_automation.compare_visual(element, "test")
pyui_automation\core\session.py:516: in compare_visual
    baseline_path = os.path.join(self._visual_test_dir, f"{name}_baseline.png")
E   NameError: name 'os' is not defined. Did you forget to import 'os'</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_capture_screen_without_region" time="0.003"><failure message="AssertionError: assert False&#10; +  where False = isinstance(None, &lt;class 'numpy.ndarray'&gt;)&#10; +    where &lt;class 'numpy.ndarray'&gt; = np.ndarray">tests\backends\test_game_backend.py:196: in test_capture_screen_without_region
    assert isinstance(screenshot, np.ndarray)
E   AssertionError: assert False
E    +  where False = isinstance(None, &lt;class 'numpy.ndarray'&gt;)
E    +    where &lt;class 'numpy.ndarray'&gt; = np.ndarray</failure></testcase><testcase classname="tests.test_visual" name="test_compare_with_color_images" time="0.005" /><testcase classname="tests.test_accessibility" name="test_check_application_no_root" time="0.002" /><testcase classname="tests.test_accessibility" name="test_generate_report_no_violations" time="0.004" /><testcase classname="tests.test_visual" name="test_phash_with_rotated_image" time="0.004"><failure message="assert not True&#10; +  where True = &lt;function array_equal at 0x000001E9B71C57B0&gt;(array([[False, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, Fal...se, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False, False]]), array([[False, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, Fal...se, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False, False]]))&#10; +    where &lt;function array_equal at 0x000001E9B71C57B0&gt; = np.array_equal">tests\test_visual.py:367: in test_phash_with_rotated_image
    assert not np.array_equal(hash1, hash2)  # Hashes should be different for rotated image
E   assert not True
E    +  where True = &lt;function array_equal at 0x000001E9B71C57B0&gt;(array([[False, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, Fal...se, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False, False]]), array([[False, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, Fal...se, False, False, False, False, False, False, False],\n       [False, False, False, False, False, False, False, False]]))
E    +    where &lt;function array_equal at 0x000001E9B71C57B0&gt; = np.array_equal</failure></testcase><testcase classname="tests.test_accessibility" name="test_color_parsing_errors" time="0.004"><failure message="assert None == (0, 0, 0)">tests\test_accessibility.py:202: in test_color_parsing_errors
    assert color == (0, 0, 0)  # Default to black
E   assert None == (0, 0, 0)</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_capture_screen_failure" time="0.003" /><testcase classname="tests.backends.test_windows" name="test_init_failure" time="0.005"><failure message="TypeError: Can't instantiate abstract class WindowsBackend without an implementation for abstract methods 'attach_to_application', 'close_application', 'close_window', 'generate_accessibility_report', 'get_application', 'get_element_pattern', 'get_element_rect', 'get_element_state', 'get_element_value', 'get_window_bounds', 'invoke_element_pattern_method', 'launch_application', 'press_key', 'release_key', 'resize_window', 'scroll_element', 'send_keys', 'set_element_property', 'set_element_text', 'set_element_value', 'set_window_position', 'wait_for_element', 'wait_for_element_property', 'wait_for_element_state'">tests\backends\test_windows.py:195: in test_init_failure
    WindowsBackend()
E   TypeError: Can't instantiate abstract class WindowsBackend without an implementation for abstract methods 'attach_to_application', 'close_application', 'close_window', 'generate_accessibility_report', 'get_application', 'get_element_pattern', 'get_element_rect', 'get_element_state', 'get_element_value', 'get_window_bounds', 'invoke_element_pattern_method', 'launch_application', 'press_key', 'release_key', 'resize_window', 'scroll_element', 'send_keys', 'set_element_property', 'set_element_text', 'set_element_value', 'set_window_position', 'wait_for_element', 'wait_for_element_property', 'wait_for_element_state'</failure></testcase><testcase classname="tests.test_elements" name="test_scroll_into_view" time="0.005" /><testcase classname="tests.backends.test_game_backend" name="test_find_element_success" time="0.004"><failure message="TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'">tests\backends\test_game_backend.py:210: in test_find_element_success
    element = game_backend.find_element(by="image", value="button.png")
E   TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'</failure></testcase><testcase classname="tests.elements.test_base" name="test_wait_for_enabled_timeout" time="0.104" /><testcase classname="tests.test_elements" name="test_wait_for_enabled" time="0.003" /><testcase classname="tests.test_accessibility" name="test_contrast_ratio_edge_cases" time="0.002" /><testcase classname="tests.test_elements" name="test_wait_for_visible" time="0.004" /><testcase classname="tests.test_accessibility" name="test_luminance_calculation_errors" time="0.002"><failure message="assert 0 &lt;= -6.452983670248286e-05">tests\test_accessibility.py:251: in test_luminance_calculation_errors
    assert 0 &lt;= luminance &lt;= 1
E   assert 0 &lt;= -6.452983670248286e-05</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_panel_init" time="0.006" /><testcase classname="tests.test_elements" name="test_get_parent" time="0.004" /><testcase classname="tests.backends.test_game_backend" name="test_find_element_not_found" time="0.003"><failure message="TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'">tests\backends\test_game_backend.py:217: in test_find_element_not_found
    element = game_backend.find_element(by="image", value="nonexistent.png")
E   TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_panel_header_text" time="0.004" /><testcase classname="tests.test_elements" name="test_get_children" time="0.003" /><testcase classname="tests.test_core" name="test_verify_visual_hash" time="0.012"><failure message="NameError: name 'os' is not defined. Did you forget to import 'os'">tests\test_core.py:162: in test_verify_visual_hash
    result = ui_automation.verify_visual_hash(element, "test")
pyui_automation\core\session.py:530: in verify_visual_hash
    baseline_path = os.path.join(self._visual_test_dir, f"{name}_baseline.png")
E   NameError: name 'os' is not defined. Did you forget to import 'os'</failure></testcase><testcase classname="tests.backends.test_windows" name="test_find_element_by_id" time="0.006"><failure message="AssertionError: assert &lt;MagicMock name='mock.CurrentAutomationId' id='2597982866368'&gt; == 'TestId'&#10; +  where &lt;MagicMock name='mock.CurrentAutomationId' id='2597982866368'&gt; = &lt;MagicMock id='2597982870976'&gt;.CurrentAutomationId">tests\backends\test_windows.py:205: in test_find_element_by_id
    assert element.CurrentAutomationId == 'TestId'
E   AssertionError: assert &lt;MagicMock name='mock.CurrentAutomationId' id='2597982866368'&gt; == 'TestId'
E    +  where &lt;MagicMock name='mock.CurrentAutomationId' id='2597982866368'&gt; = &lt;MagicMock id='2597982870976'&gt;.CurrentAutomationId</failure></testcase><testcase classname="tests.test_elements" name="test_find_element" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_panel_content_text" time="0.004" /><testcase classname="tests.test_accessibility" name="test_check_element_exception_handling" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_panel_is_expanded" time="0.004" /><testcase classname="tests.test_elements" name="test_find_elements" time="0.005" /><testcase classname="tests.backends.test_game_backend" name="test_find_element_with_region" time="0.003"><failure message="TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'">tests\backends\test_game_backend.py:226: in test_find_element_with_region
    element = game_backend.find_element(by="image", value="button.png", region=region)
E   TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'</failure></testcase><testcase classname="tests.test_accessibility" name="test_check_application_with_automation" time="0.004"><failure message="assert 0 &gt; 0&#10; +  where 0 = len([])&#10; +    where [] = &lt;pyui_automation.accessibility.AccessibilityChecker object at 0x000001B3079EBE60&gt;.violations">tests\test_accessibility.py:278: in test_check_application_with_automation
    assert len(checker.violations) &gt; 0
E   assert 0 &gt; 0
E    +  where 0 = len([])
E    +    where [] = &lt;pyui_automation.accessibility.AccessibilityChecker object at 0x000001B3079EBE60&gt;.violations</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_panel_expand" time="0.005"><failure message="AssertionError: Expected 'click' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_accordion.py:90: in test_panel_expand
    mock_header.click.assert_called_once()
E   AssertionError: Expected 'click' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.test_elements" name="test_element_screenshot" time="0.004"><failure message="AssertionError: assert &lt;MagicMock na...656195680624'&gt; == b'fake_image_data'&#10;  &#10;  Use -v to get more diff">tests\test_elements.py:305: in test_element_screenshot
    assert screenshot_data == b"fake_image_data"
E   AssertionError: assert &lt;MagicMock na...656195680624'&gt; == b'fake_image_data'
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.backends.test_windows" name="test_find_element_by_name" time="0.007"><failure message="AssertionError: assert &lt;MagicMock name='mock.CurrentName' id='2597982781712'&gt; == 'Test Element'&#10; +  where &lt;MagicMock name='mock.CurrentName' id='2597982781712'&gt; = &lt;MagicMock id='2597982791696'&gt;.CurrentName">tests\backends\test_windows.py:215: in test_find_element_by_name
    assert element.CurrentName == 'Test Element'
E   AssertionError: assert &lt;MagicMock name='mock.CurrentName' id='2597982781712'&gt; == 'Test Element'
E    +  where &lt;MagicMock name='mock.CurrentName' id='2597982781712'&gt; = &lt;MagicMock id='2597982791696'&gt;.CurrentName</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_find_element_screen_capture_failure" time="0.003"><failure message="TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'">tests\backends\test_game_backend.py:234: in test_find_element_screen_capture_failure
    element = game_backend.find_element(by="image", value="button.png")
E   TypeError: GameBackend.find_element() got an unexpected keyword argument 'by'</failure></testcase><testcase classname="tests.test_accessibility" name="test_generate_report_element_attributes" time="0.008"><failure message="AssertionError: assert 'test-id' in '\n        &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Accessibility Report&lt;/title&gt;\n            &lt;style&gt;\n             ...scriptive alt text to the image&lt;/em&gt;&lt;/p&gt;\n            &lt;/div&gt;\n            \n        &lt;/body&gt;\n        &lt;/html&gt;\n        '">tests\test_accessibility.py:302: in test_generate_report_element_attributes
    assert "test-id" in content
E   AssertionError: assert 'test-id' in '\n        &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Accessibility Report&lt;/title&gt;\n            &lt;style&gt;\n             ...scriptive alt text to the image&lt;/em&gt;&lt;/p&gt;\n            &lt;/div&gt;\n            \n        &lt;/body&gt;\n        &lt;/html&gt;\n        '</failure></testcase><testcase classname="tests.test_elements" name="test_element_attributes" time="0.003" /><testcase classname="tests.test_elements" name="test_element_properties" time="0.003" /><testcase classname="tests.test_core" name="test_launch_application" time="1.013"><failure message="RuntimeError: Failed to launch application: Process failed to start (exit code: &lt;MagicMock name='Popen().poll()' id='2072443541872'&gt;)">pyui_automation\application.py:96: in launch
    raise RuntimeError(f"Process failed to start (exit code: {process.poll()})")
E   RuntimeError: Process failed to start (exit code: &lt;MagicMock name='Popen().poll()' id='2072443541872'&gt;)

During handling of the above exception, another exception occurred:
tests\test_core.py:174: in test_launch_application
    app = ui_automation.launch_application("test.exe")
pyui_automation\core\session.py:613: in launch_application
    app.launch(path=Path(path), args=args_list, **kwargs)
pyui_automation\application.py:114: in launch
    raise RuntimeError(f"Failed to launch application: {str(e)}")
E   RuntimeError: Failed to launch application: Process failed to start (exit code: &lt;MagicMock name='Popen().poll()' id='2072443541872'&gt;)</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_init" time="0.003"><failure message="AttributeError: 'MockGameBackend' object has no attribute 'window_title'. Did you mean: 'get_window_title'?">tests\backends\test_game_backend.py:240: in test_init
    assert game_backend.window_title is None
E   AttributeError: 'MockGameBackend' object has no attribute 'window_title'. Did you mean: 'get_window_title'?</failure></testcase><testcase classname="tests.test_elements" name="test_element_rect" time="0.183"><failure message="AssertionError: assert {'height': 10...: 10, 'y': 20} == {'height': 50...: 10, 'y': 20}&#10;  &#10;  Omitting 3 identical items, use -vv to show&#10;  Differing items:&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mheight#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94m100#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mheight#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94m50#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">tests\test_elements.py:345: in test_element_rect
    assert rect == {'x': 10, 'y': 20, 'width': 100, 'height': 50}
E   AssertionError: assert {'height': 10...: 10, 'y': 20} == {'height': 50...: 10, 'y': 20}
E     
E     Omitting 3 identical items, use -vv to show
E     Differing items:
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mheight#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94m100#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mheight#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94m50#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_listview" name="test_item_init" time="0.005" /><testcase classname="tests.backends.test_windows" name="test_find_element_by_class" time="0.006"><failure message="AssertionError: assert &lt;MagicMock name='mock.CurrentClassName' id='2597982879520'&gt; == 'TestClass'&#10; +  where &lt;MagicMock name='mock.CurrentClassName' id='2597982879520'&gt; = &lt;MagicMock id='2597982865216'&gt;.CurrentClassName">tests\backends\test_windows.py:225: in test_find_element_by_class
    assert element.CurrentClassName == 'TestClass'
E   AssertionError: assert &lt;MagicMock name='mock.CurrentClassName' id='2597982879520'&gt; == 'TestClass'
E    +  where &lt;MagicMock name='mock.CurrentClassName' id='2597982879520'&gt; = &lt;MagicMock id='2597982865216'&gt;.CurrentClassName</failure></testcase><testcase classname="tests.elements.test_listview" name="test_item_text" time="0.004" /><testcase classname="tests.elements.test_listview" name="test_item_is_selected" time="0.006" /><testcase classname="tests.backends.test_game_backend" name="test_connect_original[Windows-True]" time="0.004"><failure message="assert False == True">tests\backends\test_game_backend.py:253: in test_connect_original
    assert result == expected
E   assert False == True</failure></testcase><testcase classname="tests.elements.test_listview" name="test_item_index" time="0.005" /><testcase classname="tests.elements.test_listview" name="test_item_select_when_not_selected" time="0.004" /><testcase classname="tests.backends.test_windows" name="test_find_elements_by_class" time="0.007"><failure message="AssertionError: assert 1 == 2&#10; +  where 1 = len([&lt;MagicMock id='2597984071424'&gt;])">tests\backends\test_windows.py:237: in test_find_elements_by_class
    assert len(elements) == 2
E   AssertionError: assert 1 == 2
E    +  where 1 = len([&lt;MagicMock id='2597984071424'&gt;])</failure></testcase><testcase classname="tests.elements.test_listview" name="test_item_select_when_already_selected" time="0.004" /><testcase classname="tests.backends.test_game_backend" name="test_connect_original[Darwin-True]" time="0.003" /><testcase classname="tests.elements.test_base" name="test_wait_for_visible_success" time="0.205" /><testcase classname="tests.elements.test_listview" name="test_item_wait_until_selected" time="0.004"><failure message="AttributeError: property 'is_selected' of 'ListViewItem' object has no setter">tests\elements\test_listview.py:111: in test_item_wait_until_selected
    with patch.object(listview_item, 'is_selected', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_selected' of 'ListViewItem' object has no setter</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_connect_original[Linux-True]" time="0.004"><failure message="assert False == True">tests\backends\test_game_backend.py:253: in test_connect_original
    assert result == expected
E   assert False == True</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_panel_collapse" time="0.004"><failure message="AssertionError: Expected 'click' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_accordion.py:99: in test_panel_collapse
    mock_header.click.assert_called_once()
E   AssertionError: Expected 'click' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.backends.test_windows" name="test_get_active_window_basic" time="0.007"><failure message="AssertionError: assert &lt;MagicMock id='2597984203264'&gt; == &lt;MagicMock na...597982423472'&gt;&#10;  &#10;  Use -v to get more diff">tests\backends\test_windows.py:248: in test_get_active_window_basic
    assert window == mock_element
E   AssertionError: assert &lt;MagicMock id='2597984203264'&gt; == &lt;MagicMock na...597982423472'&gt;
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_connect_failure_original" time="0.003" /><testcase classname="tests.backends.test_game_backend" name="test_capture_screen_with_region_original" time="0.002"><error message="failed on setup with &quot;file C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py, line 271&#10;  def test_capture_screen_with_region_original(game_backend, mock_screenshot):&#10;E       fixture 'mock_screenshot' not found&#10;&gt;       available fixtures: _worker_tmp, accessibility_checker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, extra, extras, game_backend, include_metadata_in_junit_xml, is_master, metadata, mock_application, mock_automation, mock_backend, mock_element, mock_element_with_current, mock_element_with_get, mock_os_module, mock_performance_data, mock_process, mock_session, mocker, module_mocker, monkeypatch, no_cover, package_mocker, performance_monitor, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, setup_reporting, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, ui_automation, worker_id, worker_tmpdir&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py:271&quot;">file C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py, line 271
  def test_capture_screen_with_region_original(game_backend, mock_screenshot):
E       fixture 'mock_screenshot' not found
&gt;       available fixtures: _worker_tmp, accessibility_checker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, extra, extras, game_backend, include_metadata_in_junit_xml, is_master, metadata, mock_application, mock_automation, mock_backend, mock_element, mock_element_with_current, mock_element_with_get, mock_os_module, mock_performance_data, mock_process, mock_session, mocker, module_mocker, monkeypatch, no_cover, package_mocker, performance_monitor, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, setup_reporting, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, ui_automation, worker_id, worker_tmpdir
&gt;       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py:271</error></testcase><testcase classname="tests.backends.test_game_backend" name="test_capture_screen_without_region_original" time="0.003"><error message="failed on setup with &quot;file C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py, line 279&#10;  def test_capture_screen_without_region_original(game_backend, mock_screenshot):&#10;E       fixture 'mock_screenshot' not found&#10;&gt;       available fixtures: _worker_tmp, accessibility_checker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, extra, extras, game_backend, include_metadata_in_junit_xml, is_master, metadata, mock_application, mock_automation, mock_backend, mock_element, mock_element_with_current, mock_element_with_get, mock_os_module, mock_performance_data, mock_process, mock_session, mocker, module_mocker, monkeypatch, no_cover, package_mocker, performance_monitor, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, setup_reporting, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, ui_automation, worker_id, worker_tmpdir&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py:279&quot;">file C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py, line 279
  def test_capture_screen_without_region_original(game_backend, mock_screenshot):
E       fixture 'mock_screenshot' not found
&gt;       available fixtures: _worker_tmp, accessibility_checker, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, extra, extras, game_backend, include_metadata_in_junit_xml, is_master, metadata, mock_application, mock_automation, mock_backend, mock_element, mock_element_with_current, mock_element_with_get, mock_os_module, mock_performance_data, mock_process, mock_session, mocker, module_mocker, monkeypatch, no_cover, package_mocker, performance_monitor, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, setup_reporting, temp_dir, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, ui_automation, worker_id, worker_tmpdir
&gt;       use 'pytest --fixtures [testpath]' for help on them.

C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_game_backend.py:279</error></testcase><testcase classname="tests.backends.test_game_backend" name="test_capture_screen_failure_original" time="0.004" /><testcase classname="tests.backends.test_game_backend" name="test_find_element_success_original" time="0.003"><failure message="NameError: name 'Image' is not defined">tests\backends\test_game_backend.py:296: in test_find_element_success_original
    screen = Image.new('RGB', (800, 600), color='white')
E   NameError: name 'Image' is not defined</failure></testcase><testcase classname="tests.backends.test_windows" name="test_capture_screen" time="0.010" /><testcase classname="tests.backends.test_windows" name="test_capture_window" time="0.008" /><testcase classname="tests.backends.test_game_backend" name="test_find_element_not_found_original" time="0.003"><failure message="NameError: name 'Image' is not defined">tests\backends\test_game_backend.py:314: in test_find_element_not_found_original
    screen = Image.new('RGB', (800, 600), color='white')
E   NameError: name 'Image' is not defined</failure></testcase><testcase classname="tests.backends.test_windows" name="test_get_element_pattern" time="0.005" /><testcase classname="tests.test_input" name="test_drag_move_fails" time="0.305"><failure message="assert True is False&#10; +  where True = drag(100, 200, 300, 400)&#10; +    where drag = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2DCEF30&gt;.drag">tests\test_input.py:80: in test_drag_move_fails
    assert mouse.drag(100, 200, 300, 400) is False
E   assert True is False
E    +  where True = drag(100, 200, 300, 400)
E    +    where drag = &lt;pyui_automation.input.mouse.Mouse object at 0x00000210F2DCEF30&gt;.drag</failure></testcase><testcase classname="tests.backends.test_windows" name="test_find_element" time="0.008"><failure message="AssertionError: assert &lt;MagicMock name='mock.CurrentAutomationId' id='2597985025872'&gt; == 'TestId'&#10; +  where &lt;MagicMock name='mock.CurrentAutomationId' id='2597985025872'&gt; = &lt;MagicMock id='2597985233248'&gt;.CurrentAutomationId">tests\backends\test_windows.py:323: in test_find_element
    assert element.CurrentAutomationId == "TestId"
E   AssertionError: assert &lt;MagicMock name='mock.CurrentAutomationId' id='2597985025872'&gt; == 'TestId'
E    +  where &lt;MagicMock name='mock.CurrentAutomationId' id='2597985025872'&gt; = &lt;MagicMock id='2597985233248'&gt;.CurrentAutomationId</failure></testcase><testcase classname="tests.backends.test_game_backend" name="test_find_element_with_region_original" time="0.003"><failure message="NameError: name 'Image' is not defined">tests\backends\test_game_backend.py:324: in test_find_element_with_region_original
    screen = Image.new('RGB', (800, 600), color='white')
E   NameError: name 'Image' is not defined</failure></testcase><testcase classname="tests.elements.test_listview" name="test_listview_init" time="0.005" /><testcase classname="tests.elements.test_accordion" name="test_panel_wait_until_expanded" time="0.004"><failure message="AttributeError: property 'is_expanded' of 'AccordionPanel' object has no deleter">C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_expanded' of 'AccordionPanel' object has no setter

During handling of the above exception, another exception occurred:
tests\elements\test_accordion.py:108: in test_panel_wait_until_expanded
    with patch.object(panel, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1577: in __enter__
    if not self.__exit__(*sys.exc_info()):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
E   AttributeError: property 'is_expanded' of 'AccordionPanel' object has no deleter</failure></testcase><testcase classname="tests.elements.test_listview" name="test_listview_items" time="0.006" /><testcase classname="tests.backends.test_game_backend" name="test_find_element_screen_capture_failure_original" time="0.004"><failure message="NameError: name 'Image' is not defined">tests\backends\test_game_backend.py:340: in test_find_element_screen_capture_failure_original
    template = Image.new('RGB', (50, 50), color='black')
E   NameError: name 'Image' is not defined</failure></testcase><testcase classname="tests.elements.test_listview" name="test_listview_selected_items" time="0.005" /><testcase classname="tests.elements.test_listview" name="test_listview_item_count" time="0.004" /><testcase classname="tests.backends.test_windows" name="test_find_elements" time="0.006"><failure message="AssertionError: assert 1 == 2&#10; +  where 1 = len([&lt;MagicMock id='2597982869824'&gt;])">tests\backends\test_windows.py:353: in test_find_elements
    assert len(elements) == 2
E   AssertionError: assert 1 == 2
E    +  where 1 = len([&lt;MagicMock id='2597982869824'&gt;])</failure></testcase><testcase classname="tests.elements.test_listview" name="test_listview_get_item" time="0.004" /><testcase classname="tests.backends.test_base" name="test_find_element_by_id" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_get_item_not_found" time="0.004" /><testcase classname="tests.backends.test_base" name="test_find_element_by_name" time="0.004" /><testcase classname="tests.elements.test_listview" name="test_listview_get_item_by_index" time="0.006" /><testcase classname="tests.backends.test_base" name="test_find_element_by_class" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_get_item_by_index_out_of_range" time="0.004" /><testcase classname="tests.backends.test_base" name="test_find_element_by_role" time="0.003" /><testcase classname="tests.backends.test_base" name="test_find_element_by_xpath" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_select_item" time="0.004" /><testcase classname="tests.backends.test_windows" name="test_create_condition" time="0.006" /><testcase classname="tests.backends.test_base" name="test_find_element_by_css" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_select_item_not_found" time="0.006" /><testcase classname="tests.backends.test_windows" name="test_get_active_window" time="0.006"><failure message="AssertionError: assert &lt;MagicMock id='2597983921904'&gt; == &lt;MagicMock na...597982817360'&gt;&#10;  &#10;  Use -v to get more diff">tests\backends\test_windows.py:395: in test_get_active_window
    assert window == mock_element
E   AssertionError: assert &lt;MagicMock id='2597983921904'&gt; == &lt;MagicMock na...597982817360'&gt;
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.backends.test_base" name="test_find_element_by_text" time="0.003" /><testcase classname="tests.backends.test_base" name="test_find_element_by_partial_text" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_select_item_by_index" time="0.004" /><testcase classname="tests.backends.test_base" name="test_find_element_by_ocr" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_select_item_by_index_out_of_range" time="0.004" /><testcase classname="tests.backends.test_base" name="test_find_element_by_image" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_select_multiple_items" time="0.005" /><testcase classname="tests.backends.test_base" name="test_find_element_returns_none" time="0.003" /><testcase classname="tests.test_elements" name="test_element_center" time="0.003" /><testcase classname="tests.backends.test_base" name="test_get_active_window" time="0.003" /><testcase classname="tests.test_elements" name="test_element_value" time="0.005"><failure message="AssertionError: assert &lt;MagicMock name='mock.value' id='2656196312432'&gt; == 'initial_value'&#10; +  where &lt;MagicMock name='mock.value' id='2656196312432'&gt; = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A71A30380&gt;.value">tests\test_elements.py:361: in test_element_value
    assert ui_element.value == "initial_value"
E   AssertionError: assert &lt;MagicMock name='mock.value' id='2656196312432'&gt; == 'initial_value'
E    +  where &lt;MagicMock name='mock.value' id='2656196312432'&gt; = &lt;pyui_automation.elements.base.UIElement object at 0x0000026A71A30380&gt;.value</failure></testcase><testcase classname="tests.elements.test_listview" name="test_listview_clear_selection" time="0.004" /><testcase classname="tests.backends.test_windows" name="test_get_window_handles" time="0.006" /><testcase classname="tests.backends.test_base" name="test_take_screenshot" time="0.003" /><testcase classname="tests.elements.test_listview" name="test_listview_wait_until_item_count" time="0.005"><failure message="AttributeError: property 'item_count' of 'ListView' object has no deleter">C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'item_count' of 'ListView' object has no setter

During handling of the above exception, another exception occurred:
tests\elements\test_listview.py:203: in test_listview_wait_until_item_count
    with patch.object(listview, 'item_count', 3):
C:\Program Files\Python312\Lib\unittest\mock.py:1577: in __enter__
    if not self.__exit__(*sys.exc_info()):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
E   AttributeError: property 'item_count' of 'ListView' object has no deleter</failure></testcase><testcase classname="tests.backends.test_base" name="test_get_screen_size" time="0.003" /><testcase classname="tests.backends.test_windows" name="test_click" time="0.006" /><testcase classname="tests.backends.test_base" name="test_find_elements" time="0.003" /><testcase classname="tests.backends.test_base" name="test_find_elements_empty" time="0.002" /><testcase classname="tests.backends.test_windows" name="test_type_text" time="0.007" /><testcase classname="tests.test_elements" name="test_element_selected" time="0.003"><failure message="TypeError: 'bool' object is not callable">tests\test_elements.py:373: in test_element_selected
    assert ui_element.is_selected()
E   TypeError: 'bool' object is not callable</failure></testcase><testcase classname="tests.backends.test_base" name="test_abstract_find_element" time="0.003"><failure message="Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;">tests\backends\test_base.py:521: in test_abstract_find_element
    with pytest.raises(NotImplementedError):
E   Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;</failure></testcase><testcase classname="tests.backends.test_windows" name="test_get_screen_size" time="0.204"><failure message="assert (1920, 1080) == (0, 0)&#10;  &#10;  At index 0 diff: #x1B[0m#x1B[94m1920#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m0#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">tests\backends\test_windows.py:486: in test_get_screen_size
    assert size == (0, 0)
E   assert (1920, 1080) == (0, 0)
E     
E     At index 0 diff: #x1B[0m#x1B[94m1920#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m0#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_colorpicker" name="test_init" time="0.004" /><testcase classname="tests.backends.test_base" name="test_abstract_find_elements" time="0.003"><failure message="Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;">tests\backends\test_base.py:526: in test_abstract_find_elements
    with pytest.raises(NotImplementedError):
E   Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;</failure></testcase><testcase classname="tests.elements.test_colorpicker" name="test_color" time="0.003" /><testcase classname="tests.elements.test_base" name="test_wait_for_visible_timeout" time="0.107" /><testcase classname="tests.elements.test_colorpicker" name="test_rgb" time="0.012" /><testcase classname="tests.elements.test_colorpicker" name="test_alpha" time="0.003" /><testcase classname="tests.elements.test_colorpicker" name="test_is_expanded" time="0.004" /><testcase classname="tests.backends.test_base" name="test_abstract_get_active_window" time="0.003"><failure message="Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;">tests\backends\test_base.py:531: in test_abstract_get_active_window
    with pytest.raises(NotImplementedError):
E   Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;</failure></testcase><testcase classname="tests.elements.test_colorpicker" name="test_set_color_hex" time="0.005" /><testcase classname="tests.test_performance" name="test_collect_metrics" time="0.005"><failure message="assert 1 == 104857600">tests\test_performance.py:123: in test_collect_metrics
    assert metrics["memory_usage"] == memory_size
E   assert 1 == 104857600</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_panel_wait_until_collapsed" time="0.005"><failure message="assert not True&#10; +  where True = &lt;function AccordionPanel.wait_until_collapsed.&lt;locals&gt;.&lt;lambda&gt; at 0x000001E9CAFF58A0&gt;()">tests\elements\test_accordion.py:121: in test_panel_wait_until_collapsed
    assert not condition_func()
E   assert not True
E    +  where True = &lt;function AccordionPanel.wait_until_collapsed.&lt;locals&gt;.&lt;lambda&gt; at 0x000001E9CAFF58A0&gt;()</failure></testcase><testcase classname="tests.elements.test_colorpicker" name="test_set_color_rgb" time="0.007" /><testcase classname="tests.elements.test_colorpicker" name="test_set_alpha_valid" time="0.006" /><testcase classname="tests.backends.test_base" name="test_abstract_take_screenshot" time="0.004"><failure message="Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;">tests\backends\test_base.py:536: in test_abstract_take_screenshot
    with pytest.raises(NotImplementedError):
E   Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_accordion_init" time="0.005" /><testcase classname="tests.elements.test_colorpicker" name="test_set_alpha_invalid_low" time="0.007" /><testcase classname="tests.elements.test_accordion" name="test_accordion_panels" time="0.004" /><testcase classname="tests.test_performance" name="test_measure_operation_time" time="0.104" /><testcase classname="tests.elements.test_accordion" name="test_accordion_expanded_panels" time="0.004" /><testcase classname="tests.elements.test_colorpicker" name="test_set_alpha_invalid_high" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_accordion_get_panel" time="0.006" /><testcase classname="tests.elements.test_colorpicker" name="test_expand_when_collapsed" time="0.003" /><testcase classname="tests.backends.test_base" name="test_abstract_get_screen_size" time="0.003"><failure message="Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;">tests\backends\test_base.py:541: in test_abstract_get_screen_size
    with pytest.raises(NotImplementedError):
E   Failed: DID NOT RAISE &lt;class 'NotImplementedError'&gt;</failure></testcase><testcase classname="tests.elements.test_colorpicker" name="test_expand_when_expanded" time="0.003" /><testcase classname="tests.elements.test_accordion" name="test_accordion_expand_panel" time="0.005" /><testcase classname="tests.elements.test_colorpicker" name="test_collapse_when_expanded" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_accordion_expand_panel_not_found" time="0.006" /><testcase classname="tests.elements.test_colorpicker" name="test_collapse_when_collapsed" time="0.003" /><testcase classname="tests.elements.test_colorpicker" name="test_select_preset_found" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_accordion_collapse_panel" time="0.005" /><testcase classname="tests.elements.test_breadcrumb" name="test_item_init" time="0.004" /><testcase classname="tests.elements.test_colorpicker" name="test_select_preset_not_found" time="0.006" /><testcase classname="tests.elements.test_accordion" name="test_accordion_collapse_panel_not_found" time="0.006" /><testcase classname="tests.elements.test_breadcrumb" name="test_item_text" time="0.004" /><testcase classname="tests.elements.test_colorpicker" name="test_wait_until_color_hex" time="0.004"><failure message="AttributeError: property 'color' of 'ColorPicker' object has no setter">tests\elements\test_colorpicker.py:134: in test_wait_until_color_hex
    with patch.object(colorpicker, 'color', '#FF0000'):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'color' of 'ColorPicker' object has no setter</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_accordion_expand_all" time="0.005" /><testcase classname="tests.elements.test_breadcrumb" name="test_item_is_current" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_item_url" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_accordion_collapse_all" time="0.004" /><testcase classname="tests.elements.test_base" name="test_get_parent" time="0.004" /><testcase classname="tests.elements.test_breadcrumb" name="test_item_click_with_url" time="0.003" /><testcase classname="tests.elements.test_accordion" name="test_accordion_wait_until_panel_expanded" time="0.004" /><testcase classname="tests.elements.test_base" name="test_get_children" time="0.004" /><testcase classname="tests.elements.test_breadcrumb" name="test_item_click_without_url" time="0.005"><failure message="AssertionError: Expected 'click' to not have been called. Called 1 times.&#10;Calls: [call()].">C:\Program Files\Python312\Lib\unittest\mock.py:905: in assert_not_called
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].

During handling of the above exception, another exception occurred:
tests\elements\test_breadcrumb.py:104: in test_item_click_without_url
    mock_element.click.assert_not_called()
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].</failure></testcase><testcase classname="tests.elements.test_accordion" name="test_accordion_wait_until_panel_expanded_not_found" time="0.004" /><testcase classname="tests.elements.test_base" name="test_find_element" time="0.004" /><testcase classname="tests.elements.test_accordion" name="test_accordion_wait_until_panel_collapsed" time="0.004" /><testcase classname="tests.elements.test_menu" name="test_menu_item_init" time="0.004" /><testcase classname="tests.elements.test_base" name="test_find_elements" time="0.005" /><testcase classname="tests.elements.test_accordion" name="test_accordion_wait_until_panel_collapsed_not_found" time="0.005" /><testcase classname="tests.elements.test_menu" name="test_menu_item_text" time="0.004" /><testcase classname="tests.elements.test_base" name="test_take_screenshot" time="0.005" /><testcase classname="tests.elements.test_menu" name="test_menu_item_is_enabled" time="0.003" /><testcase classname="tests.elements.test_base" name="test_get_attributes" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_init" time="0.005" /><testcase classname="tests.elements.test_menu" name="test_menu_item_has_submenu" time="0.003" /><testcase classname="tests.elements.test_base" name="test_get_attributes_fallback" time="0.004" /><testcase classname="tests.elements.test_calendar" name="test_selected_date" time="0.012" /><testcase classname="tests.elements.test_menu" name="test_menu_item_expand_with_submenu" time="0.017"><failure message="AssertionError: Expected 'hover' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'hover' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_menu.py:107: in test_menu_item_expand_with_submenu
    menu_item._element.hover.assert_called_once()
E   AssertionError: Expected 'hover' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_base" name="test_get_properties" time="0.005" /><testcase classname="tests.elements.test_base" name="test_get_properties_fallback" time="0.003" /><testcase classname="tests.test_performance" name="test_monitor_resource_usage" time="0.205" /><testcase classname="tests.elements.test_calendar" name="test_selected_date_none" time="0.005" /><testcase classname="tests.elements.test_base" name="test_rect" time="0.004" /><testcase classname="tests.elements.test_calendar" name="test_minimum_date" time="0.004" /><testcase classname="tests.elements.test_base" name="test_center" time="0.005" /><testcase classname="tests.test_input" name="test_drag_invalid_coordinates" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_minimum_date_none" time="0.003" /><testcase classname="tests.elements.test_colorpicker" name="test_wait_until_color_rgb" time="0.004"><failure message="AttributeError: property 'rgb' of 'ColorPicker' object has no setter">tests\elements\test_colorpicker.py:146: in test_wait_until_color_rgb
    with patch.object(colorpicker, 'rgb', (255, 0, 0)):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'rgb' of 'ColorPicker' object has no setter</failure></testcase><testcase classname="tests.elements.test_base" name="test_value_get" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_maximum_date" time="0.004" /><testcase classname="tests.test_input" name="test_type_text_success" time="0.005" /><testcase classname="tests.elements.test_base" name="test_value_get_fallback" time="0.003" /><testcase classname="tests.test_input" name="test_type_text_with_interval" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_maximum_date_none" time="0.004" /><testcase classname="tests.elements.test_base" name="test_value_set" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_init" time="0.005" /><testcase classname="tests.test_input" name="test_type_text_empty_string" time="0.003" /><testcase classname="tests.elements.test_base" name="test_value_set_fallback" time="0.004" /><testcase classname="tests.elements.test_calendar" name="test_displayed_month" time="0.005" /><testcase classname="tests.test_input" name="test_type_text_invalid_input" time="0.004" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_items" time="0.004" /><testcase classname="tests.test_wait" name="test_wait_until_success" time="0.204" /><testcase classname="tests.elements.test_calendar" name="test_select_date_valid" time="0.006" /><testcase classname="tests.backends.test_windows" name="test_find_window" time="0.007" /><testcase classname="tests.test_input" name="test_press_key_success" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_current_item" time="0.004" /><testcase classname="tests.elements.test_calendar" name="test_select_date_before_minimum" time="0.005" /><testcase classname="tests.test_input" name="test_press_key_empty_string" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_current_item_none" time="0.004"><failure message="assert &lt;pyui_automation.elements.breadcrumb.BreadcrumbItem object at 0x00000232F245BB30&gt; is None&#10; +  where &lt;pyui_automation.elements.breadcrumb.BreadcrumbItem object at 0x00000232F245BB30&gt; = &lt;pyui_automation.elements.breadcrumb.Breadcrumb object at 0x00000232F247D760&gt;.current_item">tests\elements\test_breadcrumb.py:131: in test_breadcrumb_current_item_none
    assert breadcrumb.current_item is None
E   assert &lt;pyui_automation.elements.breadcrumb.BreadcrumbItem object at 0x00000232F245BB30&gt; is None
E    +  where &lt;pyui_automation.elements.breadcrumb.BreadcrumbItem object at 0x00000232F245BB30&gt; = &lt;pyui_automation.elements.breadcrumb.Breadcrumb object at 0x00000232F247D760&gt;.current_item</failure></testcase><testcase classname="tests.backends.test_windows" name="test_get_window_title" time="0.015"><failure message="AssertionError: assert 'Test Window' == 'Test Element'&#10;  &#10;  - Test Element&#10;  + Test Window">tests\backends\test_windows.py:516: in test_get_window_title
    assert title == "Test Element"
E   AssertionError: assert 'Test Window' == 'Test Element'
E     
E     - Test Element
E     + Test Window</failure></testcase><testcase classname="tests.test_input" name="test_press_key_invalid_input" time="0.004" /><testcase classname="tests.elements.test_calendar" name="test_select_date_after_maximum" time="0.006" /><testcase classname="tests.test_input" name="test_release_key_success" time="0.006" /><testcase classname="tests.elements.test_calendar" name="test_select_date_navigate_forward" time="0.017" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_path" time="0.016" /><testcase classname="tests.test_input" name="test_release_key_empty_string" time="0.014" /><testcase classname="tests.elements.test_menu" name="test_menu_item_expand_without_submenu" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_get_item" time="0.004" /><testcase classname="tests.test_input" name="test_release_key_invalid_input" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_select_date_navigate_backward" time="0.006" /><testcase classname="tests.backends.test_windows" name="test_wait_for_window" time="0.007"><failure message="AssertionError: assert &lt;MagicMock id='2597985457488'&gt; == &lt;MagicMock id='2597983925024'&gt;&#10;  &#10;  Use -v to get more diff">tests\backends\test_windows.py:531: in test_wait_for_window
    assert window == mock_element
E   AssertionError: assert &lt;MagicMock id='2597985457488'&gt; == &lt;MagicMock id='2597983925024'&gt;
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_menu" name="test_menu_item_select" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_get_item_not_found" time="0.003" /><testcase classname="tests.test_input" name="test_press_keys_success" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_next_month" time="0.003" /><testcase classname="tests.elements.test_colorpicker" name="test_wait_until_expanded" time="0.003"><failure message="AttributeError: property 'is_expanded' of 'ColorPicker' object has no setter">tests\elements\test_colorpicker.py:158: in test_wait_until_expanded
    with patch.object(colorpicker, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_expanded' of 'ColorPicker' object has no setter</failure></testcase><testcase classname="tests.elements.test_menu" name="test_menu_init" time="0.003" /><testcase classname="tests.test_input" name="test_press_keys_empty" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_navigate_to" time="0.005" /><testcase classname="tests.elements.test_calendar" name="test_previous_month" time="0.005" /><testcase classname="tests.test_input" name="test_press_keys_invalid_input" time="0.004" /><testcase classname="tests.elements.test_menu" name="test_menu_is_open" time="0.004" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_navigate_to_not_found" time="0.005" /><testcase classname="tests.elements.test_calendar" name="test_today" time="0.004" /><testcase classname="tests.elements.test_menu" name="test_menu_items" time="0.004" /><testcase classname="tests.test_input" name="test_release_keys_success" time="0.003" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_wait_until_item_current" time="0.004" /><testcase classname="tests.test_input" name="test_release_keys_empty" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_clear" time="0.004" /><testcase classname="tests.elements.test_menu" name="test_menu_open_when_closed" time="0.004" /><testcase classname="tests.backends.test_windows" name="test_get_element_attributes" time="0.008"><failure message="AssertionError: assert {'id': 'test', 'name': 'test'} == {'bounding_re...'TestId', ...}&#10;  &#10;  Differing items:&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mid#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mtest#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mid#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mTestId#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mname#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mtest#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mname#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mTest Element#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  Right contains 5 m...&#10;  &#10;  ...Full output truncated (7 lines hidden), use '-vv' to show">tests\backends\test_windows.py:551: in test_get_element_attributes
    assert attrs == {
E   AssertionError: assert {'id': 'test', 'name': 'test'} == {'bounding_re...'TestId', ...}
E     
E     Differing items:
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mid#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mtest#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mid#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mTestId#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mname#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mtest#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mname#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mTest Element#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     Right contains 5 m...
E     
E     ...Full output truncated (7 lines hidden), use '-vv' to show</failure></testcase><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_wait_until_item_current_not_found" time="0.003" /><testcase classname="tests.test_input" name="test_release_keys_invalid_input" time="0.003" /><testcase classname="tests.elements.test_menu" name="test_menu_open_when_already_open" time="0.004" /><testcase classname="tests.elements.test_calendar" name="test_wait_until_date_selected" time="0.005"><failure message="AttributeError: property 'selected_date' of 'Calendar' object has no setter">tests\elements\test_calendar.py:219: in test_wait_until_date_selected
    with patch.object(calendar, 'selected_date', new_callable=PropertyMock) as mock_selected_date:
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'selected_date' of 'Calendar' object has no setter</failure></testcase><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_wait_until_path" time="0.004" /><testcase classname="tests.test_input" name="test_send_keys_success" time="0.004" /><testcase classname="tests.elements.test_menu" name="test_menu_close_when_open" time="0.004" /><testcase classname="tests.elements.test_breadcrumb" name="test_breadcrumb_wait_until_path_no_match" time="0.003" /><testcase classname="tests.test_input" name="test_send_keys_empty" time="0.003" /><testcase classname="tests.elements.test_menu" name="test_menu_close_when_already_closed" time="0.004" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_init" time="0.003" /><testcase classname="tests.test_input" name="test_send_keys_invalid_input" time="0.005" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_value" time="0.003" /><testcase classname="tests.elements.test_menu" name="test_menu_get_item_existing" time="0.006" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_minimum" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_init" time="0.004" /><testcase classname="tests.elements.test_spinner" name="test_spinner_init" time="0.005" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_maximum" time="0.003" /><testcase classname="tests.elements.test_menu" name="test_menu_get_item_nonexistent" time="0.005" /><testcase classname="tests.elements.test_rating" name="test_rating_value" time="0.185"><failure message="AssertionError: expected call not found.&#10;Expected: get_property('value')&#10;Actual: get_property('readonly')&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('readonly',) == ('value',)&#10;  &#10;  At index 0 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mreadonly#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mvalue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">C:\Program Files\Python312\Lib\unittest\mock.py:944: in assert_called_with
    raise AssertionError(_error_message()) from cause
E   AssertionError: expected call not found.
E   Expected: get_property('value')
E   Actual: get_property('readonly')

During handling of the above exception, another exception occurred:
tests\elements\test_rating.py:43: in test_rating_value
    mock_rating_element.get_property.assert_called_with('value')
E   AssertionError: expected call not found.
E   Expected: get_property('value')
E   Actual: get_property('readonly')
E   
E   pytest introspection follows:
E   
E   Args:
E   assert ('readonly',) == ('value',)
E     
E     At index 0 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mreadonly#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mvalue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_spinner" name="test_spinner_value" time="0.003" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_percentage_normal" time="0.004" /><testcase classname="tests.elements.test_menu" name="test_menu_select_item_existing" time="0.005" /><testcase classname="tests.elements.test_spinner" name="test_spinner_minimum" time="0.003" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_percentage_zero_range" time="0.004" /><testcase classname="tests.elements.test_spinner" name="test_spinner_maximum" time="0.003" /><testcase classname="tests.elements.test_menu" name="test_menu_select_item_nonexistent" time="0.005" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_percentage_custom_range" time="0.004" /><testcase classname="tests.elements.test_spinner" name="test_spinner_step" time="0.003" /><testcase classname="tests.elements.test_menu" name="test_menu_wait_until_open" time="0.004"><failure message="AttributeError: property 'is_open' of 'Menu' object has no deleter">C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_open' of 'Menu' object has no setter

During handling of the above exception, another exception occurred:
tests\elements\test_menu.py:208: in test_menu_wait_until_open
    with patch.object(menu, 'is_open', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1577: in __enter__
    if not self.__exit__(*sys.exc_info()):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
E   AttributeError: property 'is_open' of 'Menu' object has no deleter</failure></testcase><testcase classname="tests.elements.test_colorpicker" name="test_wait_until_collapsed" time="0.003"><failure message="AttributeError: property 'is_expanded' of 'ColorPicker' object has no setter">tests\elements\test_colorpicker.py:170: in test_wait_until_collapsed
    with patch.object(colorpicker, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_expanded' of 'ColorPicker' object has no setter</failure></testcase><testcase classname="tests.elements.test_spinner" name="test_spinner_is_enabled" time="0.003" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_is_indeterminate" time="0.003" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_status_text" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_set_value_valid" time="0.003" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_status_text_none" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_set_value_below_minimum" time="0.004" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_wait_until_complete" time="0.004"><failure message="AttributeError: property 'value' of 'ProgressBar' object has no setter">tests\elements\test_progressbar.py:123: in test_progressbar_wait_until_complete
    with patch.object(progressbar, 'value', 100.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'ProgressBar' object has no setter</failure></testcase><testcase classname="tests.elements.test_spinner" name="test_spinner_set_value_above_maximum" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_increment_normal" time="0.003" /><testcase classname="tests.elements.test_calendar" name="test_wait_until_month_displayed" time="0.004"><failure message="AttributeError: property 'displayed_month' of 'Calendar' object has no setter">tests\elements\test_calendar.py:241: in test_wait_until_month_displayed
    with patch.object(calendar, 'displayed_month', new_callable=PropertyMock) as mock_displayed_month:
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'displayed_month' of 'Calendar' object has no setter</failure></testcase><testcase classname="tests.elements.test_spinner" name="test_spinner_increment_at_maximum" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_increment_near_maximum" time="0.004" /><testcase classname="tests.elements.test_spinner" name="test_spinner_decrement_normal" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_decrement_at_minimum" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_decrement_near_minimum" time="0.003" /><testcase classname="tests.elements.test_spinner" name="test_spinner_wait_until_value" time="0.004"><failure message="AttributeError: property 'value' of 'Spinner' object has no setter">tests\elements\test_spinner.py:164: in test_spinner_wait_until_value
    with patch.object(spinner, 'value', 75):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'Spinner' object has no setter</failure></testcase><testcase classname="tests.test_performance" name="test_performance_threshold_check" time="0.003" /><testcase classname="tests.test_performance" name="test_record_metric" time="0.005"><failure message="assert 2 == 1&#10; +  where 2 = len([PerformanceMetric(timestamp=0.0015063285827636719, cpu_usage=5.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0025289058685302734, cpu_usage=5.0, memory_usage=1, response_time=0.0)])&#10; +    where [PerformanceMetric(timestamp=0.0015063285827636719, cpu_usage=5.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0025289058685302734, cpu_usage=5.0, memory_usage=1, response_time=0.0)] = &lt;pyui_automation.performance.PerformanceMonitor object at 0x000002C3D0DAB7A0&gt;.metrics">tests\test_performance.py:185: in test_record_metric
    assert len(perf_monitor.metrics) == 1
E   assert 2 == 1
E    +  where 2 = len([PerformanceMetric(timestamp=0.0015063285827636719, cpu_usage=5.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0025289058685302734, cpu_usage=5.0, memory_usage=1, response_time=0.0)])
E    +    where [PerformanceMetric(timestamp=0.0015063285827636719, cpu_usage=5.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0025289058685302734, cpu_usage=5.0, memory_usage=1, response_time=0.0)] = &lt;pyui_automation.performance.PerformanceMonitor object at 0x000002C3D0DAB7A0&gt;.metrics</failure></testcase><testcase classname="tests.elements.test_tree" name="test_node_text" time="0.003" /><testcase classname="tests.elements.test_tree" name="test_node_is_expanded" time="0.003" /><testcase classname="tests.test_performance" name="test_analyze_metrics" time="0.003" /><testcase classname="tests.elements.test_tree" name="test_node_is_selected" time="0.003" /><testcase classname="tests.test_performance" name="test_export_metrics" time="0.007" /><testcase classname="tests.elements.test_tree" name="test_node_level" time="0.003" /><testcase classname="tests.elements.test_tree" name="test_node_has_children" time="0.004" /><testcase classname="tests.test_wait" name="test_wait_until_timeout" time="0.205" /><testcase classname="tests.test_performance" name="test_plot_metrics" time="0.527" /><testcase classname="tests.elements.test_tree" name="test_node_expand" time="0.003" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_wait_until_value" time="0.004"><failure message="AttributeError: property 'value' of 'ProgressBar' object has no setter">tests\elements\test_progressbar.py:138: in test_progressbar_wait_until_value
    with patch.object(progressbar, 'value', 80.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'ProgressBar' object has no setter</failure></testcase><testcase classname="tests.elements.test_tree" name="test_node_expand_already_expanded" time="0.005" /><testcase classname="tests.elements.test_dialog" name="test_init" time="0.005" /><testcase classname="tests.elements.test_tree" name="test_node_collapse" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_title" time="0.005" /><testcase classname="tests.elements.test_tree" name="test_node_select" time="0.005" /><testcase classname="tests.elements.test_dialog" name="test_is_modal" time="0.004" /><testcase classname="tests.elements.test_tree" name="test_node_get_parent" time="0.004"><failure message="assert False&#10; +  where False = isinstance(None, TreeNode)">tests\elements\test_tree.py:126: in test_node_get_parent
    assert isinstance(parent, TreeNode)
E   assert False
E    +  where False = isinstance(None, TreeNode)</failure></testcase><testcase classname="tests.elements.test_dialog" name="test_is_visible" time="0.007" /><testcase classname="tests.elements.test_spinner" name="test_spinner_wait_until_enabled" time="0.005"><failure message="AttributeError: property 'is_enabled' of 'Spinner' object has no deleter">C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_enabled' of 'Spinner' object has no setter

During handling of the above exception, another exception occurred:
tests\elements\test_spinner.py:181: in test_spinner_wait_until_enabled
    with patch.object(spinner, 'is_enabled', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1577: in __enter__
    if not self.__exit__(*sys.exc_info()):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
E   AttributeError: property 'is_enabled' of 'Spinner' object has no deleter</failure></testcase><testcase classname="tests.elements.test_dialog" name="test_buttons" time="0.006" /><testcase classname="tests.elements.test_tree" name="test_node_get_parent_root" time="0.004" /><testcase classname="tests.elements.test_tree" name="test_node_get_children" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_click_button_found" time="0.005" /><testcase classname="tests.elements.test_tree" name="test_node_get_children_no_children" time="0.003" /><testcase classname="tests.elements.test_dialog" name="test_click_button_not_found" time="0.006" /><testcase classname="tests.elements.test_menu" name="test_menu_wait_until_closed" time="0.004"><failure message="AttributeError: property 'is_open' of 'Menu' object has no deleter">C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_open' of 'Menu' object has no setter

During handling of the above exception, another exception occurred:
tests\elements\test_menu.py:221: in test_menu_wait_until_closed
    with patch.object(menu, 'is_open', False):
C:\Program Files\Python312\Lib\unittest\mock.py:1577: in __enter__
    if not self.__exit__(*sys.exc_info()):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
E   AttributeError: property 'is_open' of 'Menu' object has no deleter</failure></testcase><testcase classname="tests.elements.test_tree" name="test_treeview_root_nodes" time="0.006"><failure message="AssertionError: expected call not found.&#10;Expected: find_elements(by='type', value='node')&#10;Actual: find_elements(by='level', value=0)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'by': 'level', 'value': 0} == {'by': 'type'...alue': 'node'}&#10;  &#10;  Differing items:&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mby#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mlevel#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mby#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mtype#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mvalue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94m0#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mvalue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mnode#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">C:\Program Files\Python312\Lib\unittest\mock.py:944: in assert_called_with
    raise AssertionError(_error_message()) from cause
E   AssertionError: expected call not found.
E   Expected: find_elements(by='type', value='node')
E   Actual: find_elements(by='level', value=0)

During handling of the above exception, another exception occurred:
tests\elements\test_tree.py:169: in test_treeview_root_nodes
    mock_treeview_element.find_elements.assert_called_with(by='type', value='node')
E   AssertionError: expected call not found.
E   Expected: find_elements(by='type', value='node')
E   Actual: find_elements(by='level', value=0)
E   
E   pytest introspection follows:
E   
E   Kwargs:
E   assert {'by': 'level', 'value': 0} == {'by': 'type'...alue': 'node'}
E     
E     Differing items:
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mby#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mlevel#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mby#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mtype#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mvalue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[94m0#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m != #x1B[0m{#x1B[33m'#x1B[39;49;00m#x1B[33mvalue#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m: #x1B[33m'#x1B[39;49;00m#x1B[33mnode#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m}#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_dialog" name="test_close" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_get_content_text" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_get_content_text_none" time="0.004" /><testcase classname="tests.elements.test_progressbar" name="test_progressbar_wait_until_percentage" time="0.005"><failure message="AttributeError: property 'percentage' of 'ProgressBar' object has no setter">tests\elements\test_progressbar.py:153: in test_progressbar_wait_until_percentage
    with patch.object(progressbar, 'percentage', 80.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'percentage' of 'ProgressBar' object has no setter</failure></testcase><testcase classname="tests.elements.test_dialog" name="test_get_message" time="0.006" /><testcase classname="tests.elements.test_dialog" name="test_get_message_none" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_wait_until_open" time="0.006"><failure message="AttributeError: property 'is_visible' of 'Dialog' object has no setter">tests\elements\test_dialog.py:125: in test_wait_until_open
    with patch.object(dialog, 'is_visible', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_visible' of 'Dialog' object has no setter</failure></testcase><testcase classname="tests.elements.test_tree" name="test_treeview_get_node_by_path" time="0.005"><failure message="assert False&#10; +  where False = isinstance(None, TreeNode)">tests\elements\test_tree.py:176: in test_treeview_get_node_by_path
    assert isinstance(node, TreeNode)
E   assert False
E    +  where False = isinstance(None, TreeNode)</failure></testcase><testcase classname="tests.elements.test_tree" name="test_treeview_get_selected_nodes" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_maximum" time="0.003" /><testcase classname="tests.elements.test_tree" name="test_treeview_expand_all" time="0.004" /><testcase classname="tests.elements.test_rating" name="test_rating_is_readonly" time="0.003" /><testcase classname="tests.elements.test_tree" name="test_treeview_collapse_all" time="0.006" /><testcase classname="tests.elements.test_rating" name="test_rating_allows_half_stars" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_set_rating_valid" time="0.004"><failure message="AssertionError: Expected 'click_at_offset' to be called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:955: in assert_called_once_with
    raise AssertionError(msg)
E   AssertionError: Expected 'click_at_offset' to be called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_rating.py:70: in test_rating_set_rating_valid
    rating._element.click_at_offset.assert_called_once_with(90, 0)  # 4.5 * 20
E   AssertionError: Expected 'click_at_offset' to be called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_toggle" name="test_init" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_wait_until_closed" time="0.007"><failure message="AttributeError: property 'is_visible' of 'Dialog' object has no setter">tests\elements\test_dialog.py:137: in test_wait_until_closed
    with patch.object(dialog, 'is_visible', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_visible' of 'Dialog' object has no setter</failure></testcase><testcase classname="tests.elements.test_progressbar" name="test_progressbar_wait_until_percentage_invalid" time="0.005" /><testcase classname="tests.elements.test_toggle" name="test_is_on" time="0.005"><failure message="AssertionError: expected call not found.&#10;Expected: get_property('toggled')&#10;Actual: get_property('enabled')&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('enabled',) == ('toggled',)&#10;  &#10;  At index 0 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33menabled#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mtoggled#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">C:\Program Files\Python312\Lib\unittest\mock.py:944: in assert_called_with
    raise AssertionError(_error_message()) from cause
E   AssertionError: expected call not found.
E   Expected: get_property('toggled')
E   Actual: get_property('enabled')

During handling of the above exception, another exception occurred:
tests\elements\test_toggle.py:35: in test_is_on
    mock_native_element.get_property.assert_called_with('toggled')
E   AssertionError: expected call not found.
E   Expected: get_property('toggled')
E   Actual: get_property('enabled')
E   
E   pytest introspection follows:
E   
E   Args:
E   assert ('enabled',) == ('toggled',)
E     
E     At index 0 diff: #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33menabled#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[33m'#x1B[39;49;00m#x1B[33mtoggled#x1B[39;49;00m#x1B[33m'#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_progressbar" name="test_progressbar_wait_until_status" time="0.004"><failure message="AttributeError: property 'status_text' of 'ProgressBar' object has no setter">tests\elements\test_progressbar.py:177: in test_progressbar_wait_until_status
    with patch.object(progressbar, 'status_text', 'Completed'):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'status_text' of 'ProgressBar' object has no setter</failure></testcase><testcase classname="tests.elements.test_spinner" name="test_spinner_float_values" time="0.005"><failure message="AssertionError: expected call not found.&#10;Expected: set_property('value', 76.0)&#10;Actual: set_property('value', 51.0)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('value', 51.0) == ('value', 76.0)&#10;  &#10;  At index 1 diff: #x1B[0m#x1B[94m51.0#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m76.0#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">C:\Program Files\Python312\Lib\unittest\mock.py:944: in assert_called_with
    raise AssertionError(_error_message()) from cause
E   AssertionError: expected call not found.
E   Expected: set_property('value', 76.0)
E   Actual: set_property('value', 51.0)

During handling of the above exception, another exception occurred:
tests\elements\test_spinner.py:204: in test_spinner_float_values
    spinner._element.set_property.assert_called_with('value', 76.0)
E   AssertionError: expected call not found.
E   Expected: set_property('value', 76.0)
E   Actual: set_property('value', 51.0)
E   
E   pytest introspection follows:
E   
E   Args:
E   assert ('value', 51.0) == ('value', 76.0)
E     
E     At index 1 diff: #x1B[0m#x1B[94m51.0#x1B[39;49;00m#x1B[90m#x1B[39;49;00m != #x1B[0m#x1B[94m76.0#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.test_wait" name="test_wait_until_custom_error" time="0.204" /><testcase classname="tests.elements.test_slider" name="test_init" time="0.004" /><testcase classname="tests.elements.test_slider" name="test_value" time="0.004" /><testcase classname="tests.elements.test_slider" name="test_minimum" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_maximum" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_step" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_set_rating_out_of_range" time="0.004" /><testcase classname="tests.elements.test_slider" name="test_set_value_valid" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_set_value_below_minimum" time="0.004" /><testcase classname="tests.elements.test_rating" name="test_rating_set_rating_half_stars_not_allowed" time="0.004" /><testcase classname="tests.elements.test_dialog" name="test_wait_until_button_enabled" time="0.006" /><testcase classname="tests.elements.test_dropdown" name="test_init" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_set_rating_readonly" time="0.003" /><testcase classname="tests.elements.test_toggle" name="test_is_enabled" time="0.003" /><testcase classname="tests.elements.test_dialog" name="test_wait_until_button_enabled_not_found" time="0.004" /><testcase classname="tests.elements.test_slider" name="test_set_value_above_maximum" time="0.004" /><testcase classname="tests.elements.test_slider" name="test_increment_normal" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_clear" time="0.004"><failure message="AssertionError: Expected 'click_at_offset' to be called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:955: in assert_called_once_with
    raise AssertionError(msg)
E   AssertionError: Expected 'click_at_offset' to be called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_rating.py:113: in test_rating_clear
    rating._element.click_at_offset.assert_called_once_with(0, 0)
E   AssertionError: Expected 'click_at_offset' to be called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_toggle" name="test_label" time="0.003" /><testcase classname="tests.elements.test_dropdown" name="test_is_expanded" time="0.003" /><testcase classname="tests.elements.test_text" name="test_init" time="0.005" /><testcase classname="tests.elements.test_notification" name="test_notification_init" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_increment_near_maximum" time="0.004" /><testcase classname="tests.elements.test_dropdown" name="test_selected_item" time="0.004" /><testcase classname="tests.elements.test_toggle" name="test_toggle_when_enabled" time="0.004" /><testcase classname="tests.elements.test_notification" name="test_notification_text" time="0.005" /><testcase classname="tests.elements.test_dropdown" name="test_items" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_decrement_normal" time="0.003" /><testcase classname="tests.elements.test_text" name="test_text_property" time="0.004" /><testcase classname="tests.elements.test_toggle" name="test_toggle_when_disabled" time="0.004"><failure message="AssertionError: Expected 'click' to not have been called. Called 1 times.&#10;Calls: [call()].">C:\Program Files\Python312\Lib\unittest\mock.py:905: in assert_not_called
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].

During handling of the above exception, another exception occurred:
tests\elements\test_toggle.py:61: in test_toggle_when_disabled
    toggle._element.click.assert_not_called()
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].</failure></testcase><testcase classname="tests.elements.test_slider" name="test_decrement_near_minimum" time="0.003" /><testcase classname="tests.elements.test_dropdown" name="test_expand_when_collapsed" time="0.003"><failure message="AttributeError: Cannot delete is_expanded property">tests\elements\test_dropdown.py:49: in test_expand_when_collapsed
    with patch.object(dropdown, 'is_expanded', False):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.elements.test_notification" name="test_notification_type" time="0.004" /><testcase classname="tests.elements.test_text" name="test_is_editable" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_wait_until_value" time="0.004"><failure message="AttributeError: property 'value' of 'Slider' object has no setter">tests\elements\test_slider.py:110: in test_wait_until_value
    with patch.object(slider, 'value', 75.0):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'value' of 'Slider' object has no setter</failure></testcase><testcase classname="tests.elements.test_notification" name="test_notification_is_visible" time="0.004" /><testcase classname="tests.elements.test_text" name="test_font_name" time="0.004" /><testcase classname="tests.elements.test_notification" name="test_notification_auto_close" time="0.004" /><testcase classname="tests.elements.test_text" name="test_font_size" time="0.004" /><testcase classname="tests.elements.test_notification" name="test_notification_duration_with_auto_close" time="0.003" /><testcase classname="tests.elements.test_text" name="test_font_weight" time="0.003" /><testcase classname="tests.elements.test_notification" name="test_notification_duration_without_auto_close" time="0.005" /><testcase classname="tests.elements.test_text" name="test_text_color" time="0.003" /><testcase classname="tests.elements.test_text" name="test_set_text_when_editable" time="0.003" /><testcase classname="tests.elements.test_notification" name="test_notification_close" time="0.007"><failure message="AssertionError: Expected 'click' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_notification.py:112: in test_notification_close
    mock_notification_element.find_element.return_value.click.assert_called_once()
E   AssertionError: Expected 'click' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_text" name="test_set_text_when_not_editable" time="0.004" /><testcase classname="tests.elements.test_text" name="test_append_text_when_editable" time="0.004" /><testcase classname="tests.elements.test_text" name="test_append_text_when_not_editable" time="0.003" /><testcase classname="tests.elements.test_text" name="test_clear_when_editable" time="0.003" /><testcase classname="tests.elements.test_text" name="test_clear_when_not_editable" time="0.003" /><testcase classname="tests.elements.test_text" name="test_wait_until_text" time="0.003" /><testcase classname="tests.elements.test_text" name="test_wait_until_contains" time="0.003" /><testcase classname="tests.elements.test_rating" name="test_rating_clear_readonly" time="0.004" /><testcase classname="tests.test_exceptions" name="test_automation_error" time="0.002" /><testcase classname="tests.test_exceptions" name="test_element_not_found_error" time="0.002" /><testcase classname="tests.elements.test_rating" name="test_rating_hover_rating_valid" time="0.004"><failure message="AssertionError: Expected 'hover_at_offset' to be called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:955: in assert_called_once_with
    raise AssertionError(msg)
E   AssertionError: Expected 'hover_at_offset' to be called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_rating.py:135: in test_rating_hover_rating_valid
    rating._element.hover_at_offset.assert_called_once_with(90, 0)  # 4.5 * 20
E   AssertionError: Expected 'hover_at_offset' to be called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_toggle" name="test_turn_on_when_off" time="0.003" /><testcase classname="tests.test_exceptions" name="test_element_state_error" time="0.002" /><testcase classname="tests.test_exceptions" name="test_timeout_error" time="0.002" /><testcase classname="tests.elements.test_toggle" name="test_turn_on_when_already_on" time="0.003"><failure message="AssertionError: Expected 'click' to not have been called. Called 1 times.&#10;Calls: [call()].">C:\Program Files\Python312\Lib\unittest\mock.py:905: in assert_not_called
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].

During handling of the above exception, another exception occurred:
tests\elements\test_toggle.py:77: in test_turn_on_when_already_on
    toggle._element.click.assert_not_called()
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].</failure></testcase><testcase classname="tests.elements.test_slider" name="test_wait_until_minimum" time="0.006" /><testcase classname="tests.test_exceptions" name="test_backend_error" time="0.002" /><testcase classname="tests.elements.test_dropdown" name="test_expand_when_already_expanded" time="0.005"><failure message="AttributeError: Cannot delete is_expanded property">C:\Program Files\Python312\Lib\unittest\mock.py:905: in assert_not_called
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to not have been called. Called 2 times.
E   Calls: [call(), call()].

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:57: in test_expand_when_already_expanded
    dropdown._element.click.assert_not_called()
E   AssertionError: Expected 'click' to not have been called. Called 2 times.
E   Calls: [call(), call()].

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:55: in test_expand_when_already_expanded
    with patch.object(dropdown, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.test_exceptions" name="test_configuration_error" time="0.003" /><testcase classname="tests.elements.test_slider" name="test_wait_until_maximum" time="0.004" /><testcase classname="tests.test_exceptions" name="test_validation_error" time="0.003" /><testcase classname="tests.test_exceptions" name="test_ocr_error" time="0.002" /><testcase classname="tests.test_optimization" name="test_init" time="0.007" /><testcase classname="tests.test_exceptions" name="test_visual_error" time="0.002" /><testcase classname="tests.test_exceptions" name="test_input_error" time="0.002" /><testcase classname="tests.test_optimization" name="test_get_cache_dir_windows" time="0.005"><failure message="AssertionError: assert False&#10; +  where False = &lt;built-in method startswith of str object at 0x000001B307B83F30&gt;('C:\\Users\\Test\\AppData\\Local')&#10; +    where &lt;built-in method startswith of str object at 0x000001B307B83F30&gt; = 'C:\\Users\\xella\\AppData\\Local\\Temp\\pyui_automation'.startswith&#10; +      where 'C:\\Users\\xella\\AppData\\Local\\Temp\\pyui_automation' = str(WindowsPath('C:/Users/xella/AppData/Local/Temp/pyui_automation'))">tests\test_optimization.py:49: in test_get_cache_dir_windows
    assert str(cache_dir).startswith(test_local_appdata)
E   AssertionError: assert False
E    +  where False = &lt;built-in method startswith of str object at 0x000001B307B83F30&gt;('C:\\Users\\Test\\AppData\\Local')
E    +    where &lt;built-in method startswith of str object at 0x000001B307B83F30&gt; = 'C:\\Users\\xella\\AppData\\Local\\Temp\\pyui_automation'.startswith
E    +      where 'C:\\Users\\xella\\AppData\\Local\\Temp\\pyui_automation' = str(WindowsPath('C:/Users/xella/AppData/Local/Temp/pyui_automation'))</failure></testcase><testcase classname="tests.test_exceptions" name="test_window_error" time="0.003" /><testcase classname="tests.test_exceptions" name="test_wait_timeout" time="0.002" /><testcase classname="tests.test_exceptions" name="test_exception_inheritance" time="0.002" /><testcase classname="tests.test_exceptions" name="test_exception_with_nested_data" time="0.002" /><testcase classname="tests.test_optimization" name="test_get_cache_dir_macos" time="0.004" /><testcase classname="tests.test_game_input" name="test_init" time="0.002" /><testcase classname="tests.test_optimization" name="test_get_cache_dir_linux" time="0.003"><failure message="AssertionError: assert False&#10; +  where False = &lt;built-in method startswith of str object at 0x000001B308F69570&gt;('/tmp/test_cache')&#10; +    where &lt;built-in method startswith of str object at 0x000001B308F69570&gt; = '\\tmp\\test_cache\\pyui_automation'.startswith&#10; +      where '\\tmp\\test_cache\\pyui_automation' = str(WindowsPath('/tmp/test_cache/pyui_automation'))">tests\test_optimization.py:74: in test_get_cache_dir_linux
    assert str(cache_dir).startswith(test_xdg_cache)
E   AssertionError: assert False
E    +  where False = &lt;built-in method startswith of str object at 0x000001B308F69570&gt;('/tmp/test_cache')
E    +    where &lt;built-in method startswith of str object at 0x000001B308F69570&gt; = '\\tmp\\test_cache\\pyui_automation'.startswith
E    +      where '\\tmp\\test_cache\\pyui_automation' = str(WindowsPath('/tmp/test_cache/pyui_automation'))</failure></testcase><testcase classname="tests.test_ocr" name="test_read_text_from_element" time="1.634"><failure message="TypeError: Image must be a numpy array or a path to an image file">tests\test_ocr.py:78: in test_read_text_from_element
    text = ocr_engine.read_text_from_element(mock_element)
pyui_automation\ocr.py:125: in read_text_from_element
    return self.recognize_text(image, preprocess=preprocess)
pyui_automation\ocr.py:71: in recognize_text
    raise TypeError("Image must be a numpy array or a path to an image file")
E   TypeError: Image must be a numpy array or a path to an image file</failure></testcase><testcase classname="tests.test_game_input" name="test_send_key" time="0.105" /><testcase classname="tests.test_optimization" name="test_cache_element" time="0.003" /><testcase classname="tests.test_optimization" name="test_get_cached_element" time="0.003" /><testcase classname="tests.test_core" name="test_attach_to_application" time="0.012" /><testcase classname="tests.elements.test_rating" name="test_rating_hover_rating_out_of_range" time="0.003" /><testcase classname="tests.elements.test_toggle" name="test_turn_on_when_disabled" time="0.005"><failure message="AssertionError: Expected 'click' to not have been called. Called 1 times.&#10;Calls: [call()].">C:\Program Files\Python312\Lib\unittest\mock.py:905: in assert_not_called
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].

During handling of the above exception, another exception occurred:
tests\elements\test_toggle.py:88: in test_turn_on_when_disabled
    toggle._element.click.assert_not_called()
E   AssertionError: Expected 'click' to not have been called. Called 1 times.
E   Calls: [call()].</failure></testcase><testcase classname="tests.test_optimization" name="test_get_cached_element_not_found" time="0.004" /><testcase classname="tests.test_wait" name="test_wait_until_element_success" time="0.054" /><testcase classname="tests.elements.test_rating" name="test_rating_wait_until_value" time="0.005" /><testcase classname="tests.test_optimization" name="test_cache_thread_safety" time="0.011" /><testcase classname="tests.elements.test_rating" name="test_rating_wait_until_interactive" time="0.003" /><testcase classname="tests.elements.test_table" name="test_cell_text" time="0.004" /><testcase classname="tests.test_core" name="test_find_elements" time="0.016" /><testcase classname="tests.elements.test_table" name="test_cell_row_index" time="0.003" /><testcase classname="tests.test_optimization" name="test_cache_persistence" time="0.006" /><testcase classname="tests.elements.test_table" name="test_cell_column_index" time="0.003" /><testcase classname="tests.test_optimization" name="test_configure_platform_optimizations" time="0.003" /><testcase classname="tests.test_core" name="test_get_active_window" time="0.009" /><testcase classname="tests.elements.test_table" name="test_cell_is_selected" time="0.004" /><testcase classname="tests.test_optimization" name="test_optimize_process" time="0.006" /><testcase classname="tests.elements.test_table" name="test_cell_select" time="0.004" /><testcase classname="tests.test_core" name="test_set_ocr_languages" time="0.008" /><testcase classname="tests.elements.test_table" name="test_table_row_count" time="0.003" /><testcase classname="tests.test_optimization" name="test_clear_cache" time="0.005" /><testcase classname="tests.elements.test_table" name="test_table_column_count" time="0.003" /><testcase classname="tests.test_optimization" name="test_save_cache" time="0.005" /><testcase classname="tests.test_core" name="test_performance_monitoring" time="0.013"><failure message="AssertionError: assert 'response_times' in {'cpu_usage': 0.0, 'cpu_usage_history': [0.0], 'duration': 0.0020062923431396484, 'memory_usage': 0.0, ...}">tests\test_core.py:212: in test_performance_monitoring
    assert 'response_times' in metrics
E   AssertionError: assert 'response_times' in {'cpu_usage': 0.0, 'cpu_usage_history': [0.0], 'duration': 0.0020062923431396484, 'memory_usage': 0.0, ...}</failure></testcase><testcase classname="tests.elements.test_table" name="test_table_selected_cells" time="0.004" /><testcase classname="tests.test_optimization" name="test_load_cache" time="0.005" /><testcase classname="tests.test_wait" name="test_wait_until_element_timeout" time="0.204" /><testcase classname="tests.elements.test_table" name="test_get_cell" time="0.004" /><testcase classname="tests.elements.test_dropdown" name="test_collapse_when_expanded" time="0.004"><failure message="AttributeError: Cannot delete is_expanded property">tests\elements\test_dropdown.py:61: in test_collapse_when_expanded
    with patch.object(dropdown, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.elements.test_table" name="test_get_cell_invalid" time="0.003" /><testcase classname="tests.elements.test_image" name="test_init" time="0.005" /><testcase classname="tests.elements.test_table" name="test_get_cell_by_text" time="0.004"><failure message="AssertionError: Expected 'find_element' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'find_element' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_table.py:118: in test_get_cell_by_text
    mock_table_element.find_element.assert_called_once()
E   AssertionError: Expected 'find_element' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_image" name="test_alt_text" time="0.006" /><testcase classname="tests.elements.test_image" name="test_source" time="0.006" /><testcase classname="tests.test_core" name="test_measure_action_performance" time="0.015" /><testcase classname="tests.test_game_input" name="test_send_key_failure" time="0.004" /><testcase classname="tests.elements.test_toggle" name="test_turn_off_when_on" time="0.005"><failure message="AssertionError: Expected 'click' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_toggle.py:99: in test_turn_off_when_on
    toggle._element.click.assert_called_once()
E   AssertionError: Expected 'click' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_image" name="test_size" time="0.005" /><testcase classname="tests.test_game_input" name="test_move_mouse" time="0.004" /><testcase classname="tests.elements.test_image" name="test_is_visible" time="0.004" /><testcase classname="tests.test_game_input" name="test_move_mouse_failure" time="0.004" /><testcase classname="tests.elements.test_image" name="test_capture" time="0.005" /><testcase classname="tests.test_core" name="test_run_stress_test" time="0.011"><failure message="TypeError: AutomationSession.run_stress_test() got an unexpected keyword argument 'test_duration'">tests\test_core.py:231: in test_run_stress_test
    results = ui_automation.run_stress_test(test_action, test_duration=1)
E   TypeError: AutomationSession.run_stress_test() got an unexpected keyword argument 'test_duration'</failure></testcase><testcase classname="tests.test_game_input" name="test_click" time="0.003" /><testcase classname="tests.elements.test_image" name="test_save_as" time="0.005" /><testcase classname="tests.test_game_input" name="test_click_failure" time="0.004" /><testcase classname="tests.elements.test_image" name="test_compare_to" time="0.006" /><testcase classname="tests.test_game_input" name="test_drag" time="0.004" /><testcase classname="tests.test_performance" name="test_measure_action" time="0.406" /><testcase classname="tests.test_game_input" name="test_drag_failure" time="0.005" /><testcase classname="tests.elements.test_image" name="test_wait_until_loaded" time="0.004"><failure message="AttributeError: property 'is_visible' of 'Image' object has no setter">tests\elements\test_image.py:90: in test_wait_until_loaded
    with patch.object(image, 'is_visible', True), \
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_visible' of 'Image' object has no setter</failure></testcase><testcase classname="tests.test_game_input" name="test_get_position" time="0.003" /><testcase classname="tests.test_core" name="test_check_memory_leaks" time="0.010"><failure message="TypeError: AutomationSession.check_memory_leaks() got an unexpected keyword argument 'test_iterations'">tests\test_core.py:242: in test_check_memory_leaks
    results = ui_automation.check_memory_leaks(test_action, test_iterations=3)
E   TypeError: AutomationSession.check_memory_leaks() got an unexpected keyword argument 'test_iterations'</failure></testcase><testcase classname="tests.test_game_input" name="test_get_position_failure" time="0.003" /><testcase classname="tests.test_game_input" name="test_scroll" time="0.003" /><testcase classname="tests.elements.test_dropdown" name="test_collapse_when_already_collapsed" time="0.005"><failure message="AttributeError: Cannot delete is_expanded property">tests\elements\test_dropdown.py:67: in test_collapse_when_already_collapsed
    with patch.object(dropdown, 'is_expanded', False):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.elements.test_table" name="test_get_cell_by_text_not_found" time="0.006"><failure message="assert &lt;pyui_automation.elements.table.TableCell object at 0x00000210F2FA8E00&gt; is None">tests\elements\test_table.py:125: in test_get_cell_by_text_not_found
    assert cell is None
E   assert &lt;pyui_automation.elements.table.TableCell object at 0x00000210F2FA8E00&gt; is None</failure></testcase><testcase classname="tests.test_game_input" name="test_scroll_failure" time="0.006" /><testcase classname="tests.elements.test_tabs" name="test_tab_text" time="0.006" /><testcase classname="tests.elements.test_tabs" name="test_tab_is_selected" time="0.003" /><testcase classname="tests.elements.test_input" name="test_init" time="0.004" /><testcase classname="tests.test_core" name="test_check_accessibility" time="0.011"><failure message="AssertionError: assert False&#10; +  where False = isinstance(&lt;MagicMock name='WindowsBackend().check_accessibility()' id='2072444929232'&gt;, list)">tests\test_core.py:253: in test_check_accessibility
    assert isinstance(results, list)
E   AssertionError: assert False
E    +  where False = isinstance(&lt;MagicMock name='WindowsBackend().check_accessibility()' id='2072444929232'&gt;, list)</failure></testcase><testcase classname="tests.elements.test_tabs" name="test_tab_is_enabled" time="0.003" /><testcase classname="tests.elements.test_input" name="test_get_value" time="0.003" /><testcase classname="tests.elements.test_input" name="test_set_value" time="0.004" /><testcase classname="tests.elements.test_tabs" name="test_tab_select_when_enabled" time="0.005" /><testcase classname="tests.elements.test_toggle" name="test_turn_off_when_already_off" time="0.004" /><testcase classname="tests.elements.test_input" name="test_clear" time="0.004" /><testcase classname="tests.elements.test_tabs" name="test_tab_select_when_disabled" time="0.003" /><testcase classname="tests.elements.test_notification" name="test_notification_get_action_buttons" time="0.220" /><testcase classname="tests.elements.test_toggle" name="test_turn_off_when_disabled" time="0.004" /><testcase classname="tests.elements.test_tabs" name="test_tab_wait_until_selected" time="0.003" /><testcase classname="tests.elements.test_input" name="test_append" time="0.004" /><testcase classname="tests.elements.test_toggle" name="test_wait_until_on" time="0.003" /><testcase classname="tests.elements.test_notification" name="test_notification_click_action_existing" time="0.004"><failure message="AssertionError: Expected 'click' to have been called once. Called 0 times.">C:\Program Files\Python312\Lib\unittest\mock.py:923: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to have been called once. Called 0 times.

During handling of the above exception, another exception occurred:
tests\elements\test_notification.py:127: in test_notification_click_action_existing
    mock_notification_element.find_element.return_value.click.assert_called_once()
E   AssertionError: Expected 'click' to have been called once. Called 0 times.</failure></testcase><testcase classname="tests.elements.test_tabs" name="test_tabcontrol_tabs" time="0.003" /><testcase classname="tests.elements.test_input" name="test_focus" time="0.003" /><testcase classname="tests.elements.test_toggle" name="test_wait_until_off" time="0.003" /><testcase classname="tests.test_core" name="test_visual_testing_workflow" time="0.012"><failure message="NameError: name 'os' is not defined. Did you forget to import 'os'">tests\test_core.py:264: in test_visual_testing_workflow
    assert ui_automation.capture_visual_baseline(element, "test")
pyui_automation\core\session.py:506: in capture_visual_baseline
    baseline_path = os.path.join(self._visual_test_dir, f"{name}_baseline.png")
E   NameError: name 'os' is not defined. Did you forget to import 'os'</failure></testcase><testcase classname="tests.elements.test_input" name="test_select_all" time="0.003" /><testcase classname="tests.elements.test_tabs" name="test_tabcontrol_selected_tab" time="0.004" /><testcase classname="tests.elements.test_toggle" name="test_wait_until_enabled" time="0.004" /><testcase classname="tests.elements.test_image" name="test_wait_until_matches" time="0.006" /><testcase classname="tests.elements.test_input" name="test_copy" time="0.004" /><testcase classname="tests.test_logging" name="test_default_initialization" time="0.003" /><testcase classname="tests.elements.test_tabs" name="test_tabcontrol_selected_tab_none" time="0.004" /><testcase classname="tests.test_logging" name="test_custom_initialization" time="0.004" /><testcase classname="tests.elements.test_input" name="test_paste" time="0.005" /><testcase classname="tests.elements.test_image" name="test_wait_until_matches_custom_threshold" time="0.006" /><testcase classname="tests.elements.test_tabs" name="test_tabcontrol_get_tab" time="0.007"><failure message="assert False&#10; +  where False = isinstance(None, TabItem)">tests\elements\test_tabs.py:116: in test_tabcontrol_get_tab
    assert isinstance(tab, TabItem)
E   assert False
E    +  where False = isinstance(None, TabItem)</failure></testcase><testcase classname="tests.test_logging" name="test_default_level" time="0.003" /><testcase classname="tests.elements.test_input" name="test_wait_until_value_is_with_default_timeout" time="0.005"><failure message="assert False&#10; +  where False = &lt;function Input.wait_until_value_is.&lt;locals&gt;.&lt;lambda&gt; at 0x00000210F3036CA0&gt;()">tests\elements\test_input.py:84: in test_wait_until_value_is_with_default_timeout
    assert condition_func()
E   assert False
E    +  where False = &lt;function Input.wait_until_value_is.&lt;locals&gt;.&lt;lambda&gt; at 0x00000210F3036CA0&gt;()</failure></testcase><testcase classname="tests.elements.test_radio" name="test_radio_init" time="0.003" /><testcase classname="tests.test_logging" name="test_set_level" time="0.004" /><testcase classname="tests.elements.test_radio" name="test_radio_is_selected" time="0.003" /><testcase classname="tests.test_logging" name="test_logging_methods" time="0.004" /><testcase classname="tests.elements.test_dropdown" name="test_select_item_success" time="0.005"><failure message="AttributeError: Cannot delete is_expanded property">tests\elements\test_dropdown.py:76: in test_select_item_success
    with patch.object(dropdown, 'is_expanded', False):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.elements.test_tabs" name="test_tabcontrol_get_tab_not_found" time="0.004" /><testcase classname="tests.elements.test_radio" name="test_radio_is_selected_when_true" time="0.003" /><testcase classname="tests.elements.test_input" name="test_wait_until_value_is_with_custom_timeout" time="0.003" /><testcase classname="tests.elements.test_radio" name="test_radio_group_name" time="0.004" /><testcase classname="tests.elements.test_toolbar" name="test_button_text" time="0.003" /><testcase classname="tests.test_logging" name="test_add_file_handler" time="0.006" /><testcase classname="tests.elements.test_radio" name="test_radio_select_when_not_selected" time="0.003" /><testcase classname="tests.elements.test_toolbar" name="test_button_tooltip" time="0.003" /><testcase classname="tests.test_core" name="test_visual_testing_not_initialized" time="0.009"><failure message="TypeError: AutomationSession.capture_visual_baseline() missing 1 required positional argument: 'name'">tests\test_core.py:277: in test_visual_testing_not_initialized
    ui_automation.capture_visual_baseline("test")
E   TypeError: AutomationSession.capture_visual_baseline() missing 1 required positional argument: 'name'</failure></testcase><testcase classname="tests.elements.test_window" name="test_title" time="0.005" /><testcase classname="tests.test_logging" name="test_multiple_handlers" time="0.005" /><testcase classname="tests.elements.test_toolbar" name="test_button_is_enabled" time="0.003" /><testcase classname="tests.elements.test_radio" name="test_radio_select_when_already_selected" time="0.004" /><testcase classname="tests.elements.test_window" name="test_maximize" time="0.004" /><testcase classname="tests.test_logging" name="test_exception_logging" time="0.003" /><testcase classname="tests.elements.test_toolbar" name="test_button_is_pressed" time="0.003" /><testcase classname="tests.elements.test_radio" name="test_radio_get_group_buttons" time="0.004"><failure message="Failed: Fixture &quot;mock_radio_group&quot; called directly. Fixtures are not meant to be called directly,&#10;but are created automatically when test functions request them as parameters.&#10;See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and&#10;https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.">Fixture "mock_radio_group" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.</failure></testcase><testcase classname="tests.test_logging" name="test_duplicate_handler_prevention" time="0.003" /><testcase classname="tests.elements.test_window" name="test_minimize" time="0.004" /><testcase classname="tests.elements.test_toolbar" name="test_button_click_when_enabled" time="0.003" /><testcase classname="tests.test_logging" name="test_global_logger_instance" time="0.003" /><testcase classname="tests.elements.test_radio" name="test_radio_wait_until_selected" time="0.004"><failure message="assert False&#10; +  where False = &lt;function RadioButton.wait_until_selected.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308EB0400&gt;()">tests\elements\test_radio.py:133: in test_radio_wait_until_selected
    assert condition_func()
E   assert False
E    +  where False = &lt;function RadioButton.wait_until_selected.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308EB0400&gt;()</failure></testcase><testcase classname="tests.elements.test_window" name="test_restore" time="0.005" /><testcase classname="tests.elements.test_toolbar" name="test_button_click_when_disabled" time="0.003" /><testcase classname="tests.test_logging" name="test_handler_formatter" time="0.003" /><testcase classname="tests.elements.test_toolbar" name="test_button_wait_until_enabled" time="0.003" /><testcase classname="tests.elements.test_window" name="test_close" time="0.004" /><testcase classname="tests.elements.test_notification" name="test_notification_click_action_nonexistent" time="0.005" /><testcase classname="tests.elements.test_toolbar" name="test_toolbar_buttons" time="0.003" /><testcase classname="tests.test_core" name="test_generate_visual_report" time="0.012"><failure message="TypeError: AutomationSession.generate_visual_report() takes 2 positional arguments but 4 were given">tests\test_core.py:293: in test_generate_visual_report
    ui_automation.generate_visual_report("test", differences, str(temp_dir))
E   TypeError: AutomationSession.generate_visual_report() takes 2 positional arguments but 4 were given</failure></testcase><testcase classname="tests.elements.test_window" name="test_move_to" time="0.004" /><testcase classname="tests.elements.test_toolbar" name="test_toolbar_get_button" time="0.004"><failure message="assert False&#10; +  where False = isinstance(None, ToolbarButton)">tests\elements\test_toolbar.py:110: in test_toolbar_get_button
    assert isinstance(button, ToolbarButton)
E   assert False
E    +  where False = isinstance(None, ToolbarButton)</failure></testcase><testcase classname="tests.elements.test_radio" name="test_radio_wait_until_not_selected" time="0.004"><failure message="assert not True&#10; +  where True = &lt;function RadioButton.wait_until_not_selected.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308EB32E0&gt;()">tests\elements\test_radio.py:149: in test_radio_wait_until_not_selected
    assert not condition_func()
E   assert not True
E    +  where True = &lt;function RadioButton.wait_until_not_selected.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308EB32E0&gt;()</failure></testcase><testcase classname="tests.test_wait" name="test_for_element_success" time="0.005"><failure message="AssertionError: assert &lt;MagicMock na...953955185472'&gt; == &lt;MagicMock id='2953955298480'&gt;&#10;  &#10;  Use -v to get more diff">tests\test_wait.py:65: in test_for_element_success
    assert element == mock_element
E   AssertionError: assert &lt;MagicMock na...953955185472'&gt; == &lt;MagicMock id='2953955298480'&gt;
E     
E     Use -v to get more diff</failure></testcase><testcase classname="tests.elements.test_notification" name="test_notification_wait_until_visible" time="0.005"><failure message="AttributeError: property 'is_visible' of 'Notification' object has no setter">tests\elements\test_notification.py:143: in test_notification_wait_until_visible
    with patch.object(notification, 'is_visible', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_visible' of 'Notification' object has no setter</failure></testcase><testcase classname="tests.test_application" name="test_terminate_application" time="0.012" /><testcase classname="tests.elements.test_window" name="test_resize" time="0.009" /><testcase classname="tests.test_application" name="test_kill_application" time="0.008" /><testcase classname="tests.elements.test_radio" name="test_radio_group_interaction" time="0.004"><failure message="Failed: Fixture &quot;mock_radio_group&quot; called directly. Fixtures are not meant to be called directly,&#10;but are created automatically when test functions request them as parameters.&#10;See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and&#10;https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.">Fixture "mock_radio_group" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.</failure></testcase><testcase classname="tests.elements.test_window" name="test_get_child_windows" time="0.006" /><testcase classname="tests.test_wait" name="test_for_element_timeout" time="0.005"><failure message="Failed: DID NOT RAISE &lt;class 'pyui_automation.exceptions.WaitTimeout'&gt;">tests\test_wait.py:73: in test_for_element_timeout
    with pytest.raises(WaitTimeout) as exc_info:
E   Failed: DID NOT RAISE &lt;class 'pyui_automation.exceptions.WaitTimeout'&gt;</failure></testcase><testcase classname="tests.elements.test_toolbar" name="test_toolbar_get_button_not_found" time="0.005" /><testcase classname="tests.elements.test_window" name="test_get_process_id" time="0.005" /><testcase classname="tests.elements.test_checkbox" name="test_init" time="0.004" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_get_friends" time="0.005"><failure message="assert True is False&#10; +  where True = &lt;pyui_automation.game_elements.social_panel.Friend object at 0x0000025CE4036180&gt;.is_online">tests\test_game_elements\test_social_panel.py:41: in test_get_friends
    assert friends[1].is_online is False
E   assert True is False
E    +  where True = &lt;pyui_automation.game_elements.social_panel.Friend object at 0x0000025CE4036180&gt;.is_online</failure></testcase><testcase classname="tests.test_core" name="test_generate_accessibility_report" time="0.012" /><testcase classname="tests.test_application" name="test_wait_for_window" time="0.114" /><testcase classname="tests.elements.test_window" name="test_bring_to_front" time="0.005" /><testcase classname="tests.elements.test_checkbox" name="test_is_checked" time="0.004" /><testcase classname="tests.test_wait" name="test_for_element_visible_success" time="0.003" /><testcase classname="tests.elements.test_dropdown" name="test_select_item_already_expanded" time="0.222"><failure message="AttributeError: Cannot delete is_expanded property">C:\Program Files\Python312\Lib\unittest\mock.py:905: in assert_not_called
    raise AssertionError(msg)
E   AssertionError: Expected 'click' to not have been called. Called 2 times.
E   Calls: [call(), call()].

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:99: in test_select_item_already_expanded
    dropdown._element.click.assert_not_called()
E   AssertionError: Expected 'click' to not have been called. Called 2 times.
E   Calls: [call(), call()].

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:95: in test_select_item_already_expanded
    with patch.object(dropdown, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.test_wait" name="test_for_element_visible_timeout" time="0.205" /><testcase classname="tests.elements.test_checkbox" name="test_check_when_unchecked" time="0.004"><failure message="AttributeError: Cannot delete is_checked property">tests\elements\test_checkbox.py:34: in test_check_when_unchecked
    with patch.object(checkbox, 'is_checked', False):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\checkbox.py:30: in is_checked
    raise AttributeError("Cannot delete is_checked property")
E   AttributeError: Cannot delete is_checked property</failure></testcase><testcase classname="tests.elements.test_splitter" name="test_panel_size" time="0.003" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_get_blocked_players" time="0.004" /><testcase classname="tests.elements.test_splitter" name="test_panel_min_size" time="0.003" /><testcase classname="tests.test_core" name="test_get_current_application_none" time="0.008" /><testcase classname="tests.elements.test_splitter" name="test_panel_max_size" time="0.003" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_add_friend" time="0.004" /><testcase classname="tests.elements.test_splitter" name="test_panel_is_collapsed" time="0.003" /><testcase classname="tests.test_core" name="test_attach_to_invalid_pid" time="0.008"><failure message="psutil.NoSuchProcess: process PID not found (pid=999999)">.venv\Lib\site-packages\psutil\_pswindows.py:727: in wrapper
    return fun(self, *args, **kwargs)
.venv\Lib\site-packages\psutil\_pswindows.py:989: in create_time
    _user, _system, created = cext.proc_times(self.pid)
E   ProcessLookupError: [Errno 3] assume no such process (originated from OpenProcess -&gt; ERROR_INVALID_PARAMETER)

During handling of the above exception, another exception occurred:
.venv\Lib\site-packages\psutil\__init__.py:355: in _init
    self._ident = self._get_ident()
.venv\Lib\site-packages\psutil\__init__.py:393: in _get_ident
    self._create_time = self._proc.create_time(fast_only=True)
.venv\Lib\site-packages\psutil\_pswindows.py:729: in wrapper
    raise convert_oserror(err, pid=self.pid, name=self._name)
E   psutil.NoSuchProcess: process no longer exists (pid=999999)

During handling of the above exception, another exception occurred:
tests\test_core.py:307: in test_attach_to_invalid_pid
    ui_automation.attach_to_application(999999)  # Non-existent PID
pyui_automation\core\session.py:627: in attach_to_application
    return Application(process=psutil.Process(pid))
.venv\Lib\site-packages\psutil\__init__.py:319: in __init__
    self._init(pid)
.venv\Lib\site-packages\psutil\__init__.py:368: in _init
    raise NoSuchProcess(pid, msg=msg)
E   psutil.NoSuchProcess: process PID not found (pid=999999)</failure></testcase><testcase classname="tests.test_game_elements.test_social_panel" name="test_remove_friend" time="0.004" /><testcase classname="tests.elements.test_splitter" name="test_splitter_orientation" time="0.003" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_block_player" time="0.006" /><testcase classname="tests.elements.test_splitter" name="test_splitter_panels" time="0.003" /><testcase classname="tests.elements.test_splitter" name="test_splitter_panel_count" time="0.004" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_unblock_player" time="0.004" /><testcase classname="tests.elements.test_splitter" name="test_get_panel_at_valid_index" time="0.006" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_send_whisper" time="0.006" /><testcase classname="tests.elements.test_notification" name="test_notification_wait_until_hidden" time="0.007"><failure message="AttributeError: property 'is_visible' of 'Notification' object has no setter">tests\elements\test_notification.py:156: in test_notification_wait_until_hidden
    with patch.object(notification, 'is_visible', False):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'is_visible' of 'Notification' object has no setter</failure></testcase><testcase classname="tests.elements.test_splitter" name="test_get_panel_at_invalid_index" time="0.003" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_invite_to_group" time="0.005" /><testcase classname="tests.utils.test_image" name="test_save_load_image" time="0.006" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_is_friend_online" time="0.004" /><testcase classname="tests.utils.test_image" name="test_load_invalid_image" time="0.002" /><testcase classname="tests.test_game_elements.test_social_panel" name="test_wait_for_friend_online" time="0.004"><failure message="AssertionError: assert &lt;MagicMock name='mock.wait_for_condition()' id='2598004908992'&gt; is True&#10; +  where &lt;MagicMock name='mock.wait_for_condition()' id='2598004908992'&gt; = wait_for_friend_online('Player1', timeout=1.0)&#10; +    where wait_for_friend_online = &lt;pyui_automation.game_elements.social_panel.SocialPanel object at 0x0000025CE529C980&gt;.wait_for_friend_online">tests\test_game_elements\test_social_panel.py:151: in test_wait_for_friend_online
    assert social_panel.wait_for_friend_online('Player1', timeout=1.0) is True
E   AssertionError: assert &lt;MagicMock name='mock.wait_for_condition()' id='2598004908992'&gt; is True
E    +  where &lt;MagicMock name='mock.wait_for_condition()' id='2598004908992'&gt; = wait_for_friend_online('Player1', timeout=1.0)
E    +    where wait_for_friend_online = &lt;pyui_automation.game_elements.social_panel.SocialPanel object at 0x0000025CE529C980&gt;.wait_for_friend_online</failure></testcase><testcase classname="tests.utils.test_image" name="test_save_image_errors" time="0.005" /><testcase classname="tests.utils.test_image" name="test_resize_image" time="0.002" /><testcase classname="tests.utils.test_image" name="test_compare_images" time="0.005"><failure message="assert not True&#10; +  where True = compare_images(array([[[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0...     [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]], dtype=uint8), array([[[1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        ...,\n        [1, 1, 1],\n        [1, 1, 1],\n        [1...     [1, 1, 1],\n        [1, 1, 1],\n        ...,\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]]], dtype=uint8))">tests\utils\test_image.py:76: in test_compare_images
    assert not compare_images(img1, img3)
E   assert not True
E    +  where True = compare_images(array([[[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0...     [0, 0, 0],\n        [0, 0, 0],\n        ...,\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]], dtype=uint8), array([[[1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n        ...,\n        [1, 1, 1],\n        [1, 1, 1],\n        [1...     [1, 1, 1],\n        [1, 1, 1],\n        ...,\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1]]], dtype=uint8))</failure></testcase><testcase classname="tests.backends.test_linux" name="test_init_success" time="0.001"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:98: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_find_element" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:103: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_find_elements" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:109: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_get_active_window" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:115: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_take_screenshot" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:121: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_get_screen_size" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:127: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_matches_criteria" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:133: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.backends.test_linux" name="test_cleanup" time="0.000"><skipped type="pytest.skip" message="Linux-specific tests can only run on Linux">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_linux.py:139: Linux-specific tests can only run on Linux</skipped></testcase><testcase classname="tests.elements.test_checkbox" name="test_check_when_already_checked" time="0.003" /><testcase classname="tests.utils.test_image" name="test_find_template" time="0.004" /><testcase classname="tests.backends.test_macos" name="test_find_element" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:81: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.backends.test_macos" name="test_find_elements" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:88: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.elements.test_checkbox" name="test_uncheck_when_checked" time="0.003" /><testcase classname="tests.backends.test_macos" name="test_get_active_window" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:95: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.backends.test_macos" name="test_take_screenshot" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:102: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.backends.test_macos" name="test_get_screen_size" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:108: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.utils.test_image" name="test_non_max_suppression" time="0.003"><failure message="assert 3 == 2&#10; +  where 3 = len([(10, 10), (12, 12), (50, 50)])">tests\utils\test_image.py:125: in test_non_max_suppression
    assert len(result) == 2  # Should keep both close matches
E   assert 3 == 2
E    +  where 3 = len([(10, 10), (12, 12), (50, 50)])</failure></testcase><testcase classname="tests.backends.test_macos" name="test_get_frontmost_application" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:115: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.elements.test_checkbox" name="test_uncheck_when_already_unchecked" time="0.003" /><testcase classname="tests.backends.test_macos" name="test_matches_criteria" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:120: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.backends.test_macos" name="test_get_attribute" time="0.000"><skipped type="pytest.skip" message="macOS-specific tests can only run on macOS">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\backends\test_macos.py:126: macOS-specific tests can only run on macOS</skipped></testcase><testcase classname="tests.elements.test_checkbox" name="test_toggle" time="0.004" /><testcase classname="tests.test_game_elements.test_world_map" name="test_open_close" time="0.004" /><testcase classname="tests.elements.test_checkbox" name="test_wait_until_checked" time="0.004"><failure message="AttributeError: Cannot delete is_checked property">tests\elements\test_checkbox.py:69: in test_wait_until_checked
    assert condition_func()
E   assert False
E    +  where False = &lt;function CheckBox.wait_until_checked.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F60CC0&gt;()

During handling of the above exception, another exception occurred:
tests\elements\test_checkbox.py:68: in test_wait_until_checked
    with patch.object(checkbox, 'is_checked', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\checkbox.py:30: in is_checked
    raise AttributeError("Cannot delete is_checked property")
E   AttributeError: Cannot delete is_checked property</failure></testcase><testcase classname="tests.test_game_elements.test_world_map" name="test_pan_to_coordinates" time="0.003" /><testcase classname="tests.utils.test_image" name="test_highlight_region" time="0.005" /><testcase classname="tests.test_game_elements.test_world_map" name="test_get_current_position" time="0.003" /><testcase classname="tests.utils.test_image" name="test_crop_image" time="0.003" /><testcase classname="tests.test_application" name="test_get_window" time="0.014"><failure message="AssertionError: assert &lt;MagicMock name='WindowsBackend().automation.GetRootElement().FindFirst()' id='2656216907744'&gt; is None">tests\test_application.py:100: in test_get_window
    assert window is None
E   AssertionError: assert &lt;MagicMock name='WindowsBackend().automation.GetRootElement().FindFirst()' id='2656216907744'&gt; is None</failure></testcase><testcase classname="tests.test_game_elements.test_world_map" name="test_set_zoom" time="0.002" /><testcase classname="tests.test_factory" name="test_create_backend_for_current_platform" time="0.001"><skipped type="pytest.skip" message="Windows UI Automation not available">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\test_factory.py:33: Windows UI Automation not available</skipped></testcase><testcase classname="tests.test_game_elements.test_world_map" name="test_add_marker" time="0.002"><failure message="TypeError: MapMarker.__init__() takes 3 positional arguments but 4 were given">tests\test_game_elements\test_world_map.py:63: in test_add_marker
    marker = world_map.add_marker(100, 200, 'Quest')
pyui_automation\game_elements\world_map.py:65: in add_marker
    marker = MapMarker(x, y, marker_type)
E   TypeError: MapMarker.__init__() takes 3 positional arguments but 4 were given</failure></testcase><testcase classname="tests.test_factory" name="test_create_backend_explicit" time="0.000"><skipped type="pytest.skip" message="Windows UI Automation not available">C:\Users\xella\CascadeProjects\windsurf-project\pyui_automation\tests\test_factory.py:40: Windows UI Automation not available</skipped></testcase><testcase classname="tests.test_factory" name="test_create_backend_invalid" time="0.003" /><testcase classname="tests.test_factory" name="test_create_keyboard" time="0.004" /><testcase classname="tests.elements.test_notification" name="test_notification_wait_until_text" time="0.005"><failure message="AttributeError: property 'text' of 'Notification' object has no setter">tests\elements\test_notification.py:170: in test_notification_wait_until_text
    with patch.object(notification, 'text', expected_text):
C:\Program Files\Python312\Lib\unittest\mock.py:1564: in __enter__
    setattr(self.target, self.attribute, new_attr)
E   AttributeError: property 'text' of 'Notification' object has no setter</failure></testcase><testcase classname="tests.test_factory" name="test_create_mouse" time="0.003" /><testcase classname="tests.test_application" name="test_get_main_window" time="0.009"><failure message="AssertionError: assert &lt;MagicMock name='WindowsBackend().automation.GetRootElement().FindFirst()' id='2656216523280'&gt; is None">tests\test_application.py:110: in test_get_main_window
    assert window is None
E   AssertionError: assert &lt;MagicMock name='WindowsBackend().automation.GetRootElement().FindFirst()' id='2656216523280'&gt; is None</failure></testcase><testcase classname="tests.test_factory" name="test_create_ocr_engine" time="1.501" /><testcase classname="tests.test_game_elements.test_world_map" name="test_remove_marker" time="0.003"><failure message="TypeError: MapMarker.__init__() takes 3 positional arguments but 4 were given">tests\test_game_elements\test_world_map.py:72: in test_remove_marker
    marker = MapMarker(100, 200, 'Quest')
E   TypeError: MapMarker.__init__() takes 3 positional arguments but 4 were given</failure></testcase><testcase classname="tests.test_game_elements.test_world_map" name="test_get_markers" time="0.004"><failure message="TypeError: MapMarker.__init__() takes 3 positional arguments but 4 were given">tests\test_game_elements\test_world_map.py:87: in test_get_markers
    markers = world_map.get_markers()
pyui_automation\game_elements\world_map.py:119: in get_markers
    return [MapMarker(m.get_property('x'), m.get_property('y'), m.get_property('type')) for m in markers]
E   TypeError: MapMarker.__init__() takes 3 positional arguments but 4 were given</failure></testcase><testcase classname="tests.test_application" name="test_get_window_handles" time="0.008" /><testcase classname="tests.test_application" name="test_get_active_window" time="0.012" /><testcase classname="tests.test_game_elements.test_world_map" name="test_get_areas" time="0.006" /><testcase classname="tests.test_application" name="test_is_running" time="0.009" /><testcase classname="tests.elements.test_checkbox" name="test_wait_until_unchecked" time="0.004"><failure message="AttributeError: Cannot delete is_checked property">tests\elements\test_checkbox.py:81: in test_wait_until_unchecked
    assert not condition_func()
E   assert not True
E    +  where True = &lt;function CheckBox.wait_until_unchecked.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F60C20&gt;()

During handling of the above exception, another exception occurred:
tests\elements\test_checkbox.py:80: in test_wait_until_unchecked
    with patch.object(checkbox, 'is_checked', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\checkbox.py:30: in is_checked
    raise AttributeError("Cannot delete is_checked property")
E   AttributeError: Cannot delete is_checked property</failure></testcase><testcase classname="tests.test_di" name="test_register_resolve" time="0.003" /><testcase classname="tests.test_application" name="test_get_cpu_usage" time="0.008" /><testcase classname="tests.test_di" name="test_register_singleton" time="0.002" /><testcase classname="tests.test_di" name="test_register_factory" time="0.002" /><testcase classname="tests.test_di" name="test_resolve_unregistered" time="0.002" /><testcase classname="tests.test_application" name="test_get_memory_usage" time="0.008"><failure message="assert 1.0 == (1024 * 1024)">tests\test_application.py:135: in test_get_memory_usage
    assert memory_usage == 1024*1024
E   assert 1.0 == (1024 * 1024)</failure></testcase><testcase classname="tests.test_di" name="test_multiple_registrations" time="0.003" /><testcase classname="tests.test_di" name="test_singleton_vs_transient" time="0.003" /><testcase classname="tests.test_wait" name="test_for_element_enabled_success" time="0.003" /><testcase classname="tests.utils.test_validation" name="test_validate_type" time="0.005" /><testcase classname="tests.test_game_elements.test_health_bar" name="test_get_health_percentage" time="0.004" /><testcase classname="tests.test_game_elements.test_skill_bar" name="test_use_skill" time="0.005" /><testcase classname="tests.test_wait" name="test_for_element_enabled_timeout" time="0.205" /><testcase classname="tests.utils.test_validation" name="test_validate_not_none" time="0.002" /><testcase classname="tests.test_game_elements.test_health_bar" name="test_is_full_health" time="0.002" /><testcase classname="tests.test_game_elements.test_skill_bar" name="test_use_skill_by_name" time="0.004" /><testcase classname="tests.test_game_elements.test_health_bar" name="test_is_low_health" time="0.002" /><testcase classname="tests.utils.test_validation" name="test_validate_string_not_empty" time="0.002" /><testcase classname="tests.utils.test_validation" name="test_validate_number_range" time="0.002" /><testcase classname="tests.test_game_elements.test_health_bar" name="test_wait_for_full_health" time="0.002" /><testcase classname="tests.test_game_elements.test_skill_bar" name="test_is_skill_ready" time="0.004" /><testcase classname="tests.utils.test_validation" name="test_validate_regex" time="0.003" /><testcase classname="tests.test_game_elements.test_health_bar" name="test_wait_for_health_above" time="0.003" /><testcase classname="tests.test_game_elements.test_skill_bar" name="test_wait_for_skill_ready" time="0.003" /><testcase classname="tests.test_performance" name="test_stress_test" time="1.114" /><testcase classname="tests.utils.test_validation" name="test_validate_callable" time="0.002" /><testcase classname="tests.test_game_elements.test_health_bar" name="test_wait_for_health_below" time="0.002" /><testcase classname="tests.test_game_elements.test_skill_bar" name="test_get_skill_cooldown" time="0.004" /><testcase classname="tests.utils.test_validation" name="test_validate_iterable" time="0.002" /><testcase classname="tests.elements.test_button" name="test_is_pressed" time="0.005" /><testcase classname="tests.utils.test_validation" name="test_validate_all" time="0.002" /><testcase classname="tests.test_game_elements.test_skill_bar" name="test_get_skill_charges" time="0.004"><failure message="AssertionError: assert (0, 0) == 2&#10; +  where (0, 0) = get_skill_charges('Skill 1')&#10; +    where get_skill_charges = &lt;pyui_automation.game_elements.skill_bar.SkillBar object at 0x0000025CE530FD10&gt;.get_skill_charges">tests\test_game_elements\test_skill_bar.py:108: in test_get_skill_charges
    assert skill_bar.get_skill_charges('Skill 1') == 2
E   AssertionError: assert (0, 0) == 2
E    +  where (0, 0) = get_skill_charges('Skill 1')
E    +    where get_skill_charges = &lt;pyui_automation.game_elements.skill_bar.SkillBar object at 0x0000025CE530FD10&gt;.get_skill_charges</failure></testcase><testcase classname="tests.utils.test_validation" name="test_validate_any" time="0.005" /><testcase classname="tests.elements.test_button" name="test_wait_until_enabled" time="0.005" /><testcase classname="tests.elements.test_button" name="test_wait_until_clickable" time="0.004" /><testcase classname="tests.elements.test_tooltip" name="test_tooltip_text" time="0.004" /><testcase classname="tests.elements.test_button" name="test_safe_click_success" time="0.005" /><testcase classname="tests.elements.test_tooltip" name="test_tooltip_is_visible" time="0.003" /><testcase classname="tests.elements.test_button" name="test_safe_click_failure" time="0.007" /><testcase classname="tests.elements.test_tooltip" name="test_tooltip_position" time="0.003" /><testcase classname="tests.elements.test_tooltip" name="test_tooltip_size" time="0.003" /><testcase classname="tests.elements.test_tooltip" name="test_tooltip_wait_until_visible" time="0.004"><failure message="assert not True&#10; +  where True = &lt;function Tooltip.wait_until_visible.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F61B20&gt;()">tests\elements\test_tooltip.py:69: in test_tooltip_wait_until_visible
    assert not condition_func()
E   assert not True
E    +  where True = &lt;function Tooltip.wait_until_visible.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F61B20&gt;()</failure></testcase><testcase classname="tests.test_config" name="test_default_values" time="0.007"><error message="failed on setup with &quot;TypeError: AutomationSession.__init__() missing 1 required positional argument: 'backend'&quot;">tests\conftest.py:361: in ui_automation
    automation = AutomationSession()
E   TypeError: AutomationSession.__init__() missing 1 required positional argument: 'backend'</error></testcase><testcase classname="tests.elements.test_tooltip" name="test_tooltip_wait_until_hidden" time="0.004"><failure message="assert False&#10; +  where False = &lt;function Tooltip.wait_until_hidden.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F61120&gt;()">tests\elements\test_tooltip.py:81: in test_tooltip_wait_until_hidden
    assert condition_func()
E   assert False
E    +  where False = &lt;function Tooltip.wait_until_hidden.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F61120&gt;()</failure></testcase><testcase classname="tests.elements.test_tooltip" name="test_tooltip_wait_until_text" time="0.007"><failure message="assert False&#10; +  where False = &lt;function Tooltip.wait_until_text.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F62520&gt;()">tests\elements\test_tooltip.py:95: in test_tooltip_wait_until_text
    assert condition_func()
E   assert False
E    +  where False = &lt;function Tooltip.wait_until_text.&lt;locals&gt;.&lt;lambda&gt; at 0x000001B308F62520&gt;()</failure></testcase><testcase classname="tests.test_config" name="test_set_get_values" time="0.004"><error message="failed on setup with &quot;TypeError: AutomationSession.__init__() missing 1 required positional argument: 'backend'&quot;">tests\conftest.py:361: in ui_automation
    automation = AutomationSession()
E   TypeError: AutomationSession.__init__() missing 1 required positional argument: 'backend'</error></testcase><testcase classname="tests.test_config" name="test_screenshot_dir" time="0.003"><failure message="AssertionError: assert False&#10; +  where False = isinstance('\\test\\path', Path)&#10; +    where '\\test\\path' = AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir='\\test\\path', visual_testing_enabled...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}).screenshot_dir">tests\test_config.py:43: in test_screenshot_dir
    assert isinstance(config.screenshot_dir, Path)
E   AssertionError: assert False
E    +  where False = isinstance('\\test\\path', Path)
E    +    where '\\test\\path' = AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir='\\test\\path', visual_testing_enabled...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}).screenshot_dir</failure></testcase><testcase classname="tests.test_config" name="test_timeout" time="0.002" /><testcase classname="tests.test_config" name="test_retry_interval" time="0.005" /><testcase classname="tests.elements.test_dropdown" name="test_select_item_not_found" time="0.005" /><testcase classname="tests.elements.test_dropdown" name="test_wait_until_expanded" time="0.003"><failure message="AttributeError: Cannot delete is_expanded property">tests\elements\test_dropdown.py:120: in test_wait_until_expanded
    assert condition_func()
E   assert False
E    +  where False = &lt;function DropDown.wait_until_expanded.&lt;locals&gt;.&lt;lambda&gt; at 0x00000232F2577420&gt;()

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:119: in test_wait_until_expanded
    with patch.object(dropdown, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.elements.test_dropdown" name="test_wait_until_collapsed" time="0.004"><failure message="AttributeError: Cannot delete is_expanded property">tests\elements\test_dropdown.py:132: in test_wait_until_collapsed
    assert not condition_func()
E   assert not True
E    +  where True = &lt;function DropDown.wait_until_collapsed.&lt;locals&gt;.&lt;lambda&gt; at 0x00000232F241B9C0&gt;()

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:131: in test_wait_until_collapsed
    with patch.object(dropdown, 'is_expanded', True):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:30: in is_expanded
    raise AttributeError("Cannot delete is_expanded property")
E   AttributeError: Cannot delete is_expanded property</failure></testcase><testcase classname="tests.test_wait" name="test_for_element_property_success" time="0.104" /><testcase classname="tests.test_core" name="test_performance_monitoring_not_started" time="0.008"><failure message="ValueError: Performance monitoring not started">tests\test_core.py:311: in test_performance_monitoring_not_started
    metrics = ui_automation.get_performance_metrics()
pyui_automation\core\session.py:418: in get_performance_metrics
    raise ValueError("Performance monitoring not started")
E   ValueError: Performance monitoring not started</failure></testcase><testcase classname="tests.test_core" name="test_stress_test_invalid_duration" time="0.008"><failure message="TypeError: AutomationSession.run_stress_test() got an unexpected keyword argument 'test_duration'">tests\test_core.py:323: in test_stress_test_invalid_duration
    ui_automation.run_stress_test(test_action, test_duration=-1)
E   TypeError: AutomationSession.run_stress_test() got an unexpected keyword argument 'test_duration'</failure></testcase><testcase classname="tests.elements.test_dropdown" name="test_wait_until_item_selected" time="0.006"><failure message="AttributeError: Cannot delete selected_item property">tests\elements\test_dropdown.py:144: in test_wait_until_item_selected
    assert condition_func()
E   assert False
E    +  where False = &lt;function DropDown.wait_until_item_selected.&lt;locals&gt;.&lt;lambda&gt; at 0x00000232F25649A0&gt;()

During handling of the above exception, another exception occurred:
tests\elements\test_dropdown.py:143: in test_wait_until_item_selected
    with patch.object(dropdown, 'selected_item', 'Option 2'):
C:\Program Files\Python312\Lib\unittest\mock.py:1585: in __exit__
    delattr(self.target, self.attribute)
pyui_automation\elements\dropdown.py:50: in selected_item
    raise AttributeError("Cannot delete selected_item property")
E   AttributeError: Cannot delete selected_item property</failure></testcase><testcase classname="tests.test_core" name="test_memory_leak_check_invalid_iterations" time="0.008"><failure message="TypeError: AutomationSession.check_memory_leaks() got an unexpected keyword argument 'test_iterations'">tests\test_core.py:332: in test_memory_leak_check_invalid_iterations
    ui_automation.check_memory_leaks(test_action, test_iterations=0)
E   TypeError: AutomationSession.check_memory_leaks() got an unexpected keyword argument 'test_iterations'</failure></testcase><testcase classname="tests.test_core" name="test_measure_performance_invalid_runs" time="0.009" /><testcase classname="tests.test_wait" name="test_for_element_property_timeout" time="0.205" /><testcase classname="tests.test_core" name="test_ocr_invalid_language" time="0.009"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">tests\test_core.py:345: in test_ocr_invalid_language
    with pytest.raises(ValueError):
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.test_core" name="test_mouse_invalid_coordinates" time="0.008" /><testcase classname="tests.test_core" name="test_keyboard_invalid_key" time="0.008" /><testcase classname="tests.test_core" name="test_find_element_invalid_strategy" time="0.009"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">tests\test_core.py:360: in test_find_element_invalid_strategy
    with pytest.raises(ValueError):
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.test_core" name="test_wait_for_invalid_timeout" time="0.008"><failure message="TypeError: AutomationSession.wait_for() got multiple values for argument 'timeout'">tests\test_core.py:366: in test_wait_for_invalid_timeout
    ui_automation.wait_for("id", "test-id", timeout=-1)
E   TypeError: AutomationSession.wait_for() got multiple values for argument 'timeout'</failure></testcase><testcase classname="tests.test_core" name="test_backend_error_handling" time="0.010"><failure message="Failed: DID NOT RAISE &lt;class 'RuntimeError'&gt;">tests\test_core.py:399: in test_backend_error_handling
    with pytest.raises(RuntimeError, match="Element not found"):
E   Failed: DID NOT RAISE &lt;class 'RuntimeError'&gt;</failure></testcase><testcase classname="tests.test_core" name="test_visual_tester_error_handling" time="0.013"><failure message="TypeError: AutomationSession.compare_visual() missing 1 required positional argument: 'name'">tests\test_core.py:414: in test_visual_tester_error_handling
    ui_automation.compare_visual("test")
E   TypeError: AutomationSession.compare_visual() missing 1 required positional argument: 'name'</failure></testcase><testcase classname="tests.test_core" name="test_process_monitoring" time="0.011"><failure message="AssertionError: assert 'response_times' in {'cpu_usage': 0.0, 'cpu_usage_history': [0.0], 'duration': 0.0014171600341796875, 'memory_usage': 0.0, ...}">tests\test_core.py:436: in test_process_monitoring
    assert 'response_times' in metrics
E   AssertionError: assert 'response_times' in {'cpu_usage': 0.0, 'cpu_usage_history': [0.0], 'duration': 0.0014171600341796875, 'memory_usage': 0.0, ...}</failure></testcase><testcase classname="tests.test_core" name="test_numpy_dependency" time="0.013" /><testcase classname="tests.test_core" name="test_backend_abstract_methods" time="0.003"><failure message="TypeError: Can't instantiate abstract class TestBackend without an implementation for abstract methods 'attach_to_application', 'capture_element_screenshot', 'capture_screenshot', 'check_accessibility', 'click_mouse', 'close_application', 'close_window', 'double_click_mouse', 'find_element', 'find_elements', 'generate_accessibility_report', 'get_active_window', 'get_application', 'get_element_attributes', 'get_element_pattern', 'get_element_property', 'get_element_rect', 'get_element_state', 'get_element_text', 'get_element_value', 'get_screen_size', 'get_window_bounds', 'get_window_title', 'invoke_element_pattern_method', 'launch_application', 'maximize_window', 'minimize_window', 'move_mouse', 'press_key', 'release_key', 'resize_window', 'right_click_mouse', 'scroll_element', 'send_keys', 'set_element_property', 'set_element_text', 'set_element_value', 'set_window_position', 'take_screenshot', 'wait_for_element', 'wait_for_element_property', 'wait_for_element_state'">tests\test_core.py:456: in test_backend_abstract_methods
    backend = TestBackend()
E   TypeError: Can't instantiate abstract class TestBackend without an implementation for abstract methods 'attach_to_application', 'capture_element_screenshot', 'capture_screenshot', 'check_accessibility', 'click_mouse', 'close_application', 'close_window', 'double_click_mouse', 'find_element', 'find_elements', 'generate_accessibility_report', 'get_active_window', 'get_application', 'get_element_attributes', 'get_element_pattern', 'get_element_property', 'get_element_rect', 'get_element_state', 'get_element_text', 'get_element_value', 'get_screen_size', 'get_window_bounds', 'get_window_title', 'invoke_element_pattern_method', 'launch_application', 'maximize_window', 'minimize_window', 'move_mouse', 'press_key', 'release_key', 'resize_window', 'right_click_mouse', 'scroll_element', 'send_keys', 'set_element_property', 'set_element_text', 'set_element_value', 'set_window_position', 'take_screenshot', 'wait_for_element', 'wait_for_element_property', 'wait_for_element_state'</failure></testcase><testcase classname="tests.test_wait" name="test_for_element_pattern_success" time="0.055" /><testcase classname="tests.test_core" name="test_backend_initialization_with_config" time="0.003"><failure message="TypeError: AutomationSession.__init__() missing 1 required positional argument: 'backend'">tests\test_core.py:482: in test_backend_initialization_with_config
    ui = AutomationSession(config=config)
E   TypeError: AutomationSession.__init__() missing 1 required positional argument: 'backend'</failure></testcase><testcase classname="tests.test_core" name="test_element_waits_configuration" time="0.010"><failure message="AssertionError: assert 10.0 == 15&#10; +  where 10.0 = AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}).default_timeout&#10; +    where AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}) = &lt;pyui_automation.core.session.AutomationSession object at 0x000001E2871220F0&gt;._config">tests\test_core.py:495: in test_element_waits_configuration
    assert ui_automation._config.default_timeout == custom_timeout
E   AssertionError: assert 10.0 == 15
E    +  where 10.0 = AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}).default_timeout
E    +    where AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}) = &lt;pyui_automation.core.session.AutomationSession object at 0x000001E2871220F0&gt;._config</failure></testcase><testcase classname="tests.test_wait" name="test_for_element_pattern_timeout" time="0.205" /><testcase classname="tests.test_core" name="test_visual_testing_configuration" time="0.014"><failure message="AssertionError: assert 0.95 == 0.98&#10; +  where 0.95 = AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}).visual_threshold&#10; +    where AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}) = &lt;pyui_automation.core.session.AutomationSession object at 0x000001E2888D9B50&gt;._config">tests\test_core.py:505: in test_visual_testing_configuration
    assert ui_automation._config.visual_threshold == custom_threshold
E   AssertionError: assert 0.95 == 0.98
E    +  where 0.95 = AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}).visual_threshold
E    +    where AutomationConfig(screenshot_format='png', screenshot_quality=90, screenshot_dir=None, visual_testing_enabled=False, vi...cessibility_standards=['wcag2a', 'wcag2aa'], accessibility_output_dir=None, backend_type='windows', backend_options={}) = &lt;pyui_automation.core.session.AutomationSession object at 0x000001E2888D9B50&gt;._config</failure></testcase><testcase classname="tests.test_core" name="test_performance_monitoring_configuration" time="0.010"><failure message="AssertionError: assert False&#10; +  where False = hasattr(&lt;pyui_automation.core.session.AutomationSession object at 0x000001E2871D57C0&gt;, '_monitoring_thread')">tests\test_core.py:512: in test_performance_monitoring_configuration
    assert hasattr(ui_automation, "_monitoring_thread")
E   AssertionError: assert False
E    +  where False = hasattr(&lt;pyui_automation.core.session.AutomationSession object at 0x000001E2871D57C0&gt;, '_monitoring_thread')</failure></testcase><testcase classname="tests.test_core" name="test_multiple_backend_operations" time="0.008"><failure message="TypeError: unsupported operand type(s) for +: 'float' and 'str'">tests\test_core.py:524: in test_multiple_backend_operations
    ui_automation.wait_for("id", element_id)
pyui_automation\core\session.py:326: in wait_for
    end_time = time.time() + timeout
E   TypeError: unsupported operand type(s) for +: 'float' and 'str'</failure></testcase><testcase classname="tests.test_core" name="test_concurrent_operations" time="0.015" /><testcase classname="tests.test_wait" name="test_for_element_text_success" time="0.206"><failure message="pyui_automation.exceptions.WaitTimeout: Element text mismatch: id=test-id">tests\test_wait.py:166: in test_for_element_text_success
    element = element_waits.for_element_text("id", "test-id", "test-text", timeout=0.2)
pyui_automation\wait.py:193: in for_element_text
    self.wait_until(condition, timeout,
pyui_automation\wait.py:74: in wait_until
    return wait_until(condition, timeout, poll_frequency, error_message)
pyui_automation\wait.py:39: in wait_until
    raise WaitTimeout(error_message)
E   pyui_automation.exceptions.WaitTimeout: Element text mismatch: id=test-id</failure></testcase><testcase classname="tests.test_wait" name="test_for_element_text_timeout" time="0.206" /><testcase classname="tests.test_ocr" name="test_find_text_location" time="1.553"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">tests\test_ocr.py:83: in test_find_text_location
    location = ocr_engine.find_text_location(mock_element, "Sample Text 1")
pyui_automation\ocr.py:157: in find_text_location
    element_x, element_y = element.location
E   ValueError: not enough values to unpack (expected 2, got 0)</failure></testcase><testcase classname="tests.test_performance" name="test_stress_test_with_errors" time="1.011" /><testcase classname="tests.test_wait" name="test_for_element_contains_text_success" time="0.205"><failure message="pyui_automation.exceptions.WaitTimeout: Element text does not contain: test-text">tests\test_wait.py:187: in test_for_element_contains_text_success
    element = element_waits.for_element_contains_text(
pyui_automation\wait.py:224: in for_element_contains_text
    self.wait_until(condition, timeout,
pyui_automation\wait.py:74: in wait_until
    return wait_until(condition, timeout, poll_frequency, error_message)
pyui_automation\wait.py:39: in wait_until
    raise WaitTimeout(error_message)
E   pyui_automation.exceptions.WaitTimeout: Element text does not contain: test-text</failure></testcase><testcase classname="tests.test_factory" name="test_create_visual_tester" time="0.003" /><testcase classname="tests.test_game_elements.test_buff_panel" name="test_get_active_buffs" time="0.004" /><testcase classname="tests.test_game_elements.test_buff_panel" name="test_get_active_debuffs" time="0.003" /><testcase classname="tests.test_wait" name="test_for_element_contains_text_timeout" time="0.208" /><testcase classname="tests.test_game_elements.test_buff_panel" name="test_has_buff" time="0.003"><failure message="AssertionError: assert True is False&#10; +  where True = has_buff('Agility')&#10; +    where has_buff = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F3026630&gt;.has_buff">tests\test_game_elements\test_buff_panel.py:66: in test_has_buff
    assert buff_panel.has_buff('Agility') is False
E   AssertionError: assert True is False
E    +  where True = has_buff('Agility')
E    +    where has_buff = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F3026630&gt;.has_buff</failure></testcase><testcase classname="tests.test_game_elements.test_buff_panel" name="test_has_debuff" time="0.004"><failure message="AssertionError: assert True is False&#10; +  where True = has_debuff('Slow')&#10; +    where has_debuff = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F2EB7CB0&gt;.has_debuff">tests\test_game_elements\test_buff_panel.py:77: in test_has_debuff
    assert buff_panel.has_debuff('Slow') is False
E   AssertionError: assert True is False
E    +  where True = has_debuff('Slow')
E    +    where has_debuff = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F2EB7CB0&gt;.has_debuff</failure></testcase><testcase classname="tests.test_game_elements.test_buff_panel" name="test_cancel_buff" time="0.005"><failure message="AssertionError: assert 0 == 1&#10; +  where 0 = &lt;MagicMock id='2271816979168'&gt;.clicks">tests\test_game_elements\test_buff_panel.py:90: in test_cancel_buff
    assert buff.clicks == 1
E   AssertionError: assert 0 == 1
E    +  where 0 = &lt;MagicMock id='2271816979168'&gt;.clicks</failure></testcase><testcase classname="tests.test_game_elements.test_buff_panel" name="test_wait_for_buff" time="0.004"><failure message="AssertionError: assert &lt;MagicMock name='mock.wait_for_condition()' id='2271819702176'&gt; is True&#10; +  where &lt;MagicMock name='mock.wait_for_condition()' id='2271819702176'&gt; = wait_for_buff('Strength', timeout=1.0)&#10; +    where wait_for_buff = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F30058E0&gt;.wait_for_buff">tests\test_game_elements\test_buff_panel.py:100: in test_wait_for_buff
    assert buff_panel.wait_for_buff('Strength', timeout=1.0) is True
E   AssertionError: assert &lt;MagicMock name='mock.wait_for_condition()' id='2271819702176'&gt; is True
E    +  where &lt;MagicMock name='mock.wait_for_condition()' id='2271819702176'&gt; = wait_for_buff('Strength', timeout=1.0)
E    +    where wait_for_buff = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F30058E0&gt;.wait_for_buff</failure></testcase><testcase classname="tests.test_game_elements.test_buff_panel" name="test_wait_for_buff_expire" time="0.009"><failure message="AssertionError: assert &lt;MagicMock name='mock.wait_for_condition()' id='2271837754992'&gt; is True&#10; +  where &lt;MagicMock name='mock.wait_for_condition()' id='2271837754992'&gt; = wait_for_buff_expire('Strength', timeout=1.0)&#10; +    where wait_for_buff_expire = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F2DCC320&gt;.wait_for_buff_expire">tests\test_game_elements\test_buff_panel.py:110: in test_wait_for_buff_expire
    assert buff_panel.wait_for_buff_expire('Strength', timeout=1.0) is True
E   AssertionError: assert &lt;MagicMock name='mock.wait_for_condition()' id='2271837754992'&gt; is True
E    +  where &lt;MagicMock name='mock.wait_for_condition()' id='2271837754992'&gt; = wait_for_buff_expire('Strength', timeout=1.0)
E    +    where wait_for_buff_expire = &lt;pyui_automation.game_elements.buff_panel.BuffPanel object at 0x00000210F2DCC320&gt;.wait_for_buff_expire</failure></testcase><testcase classname="tests.test_performance" name="test_memory_leak_test" time="0.109"><failure message="assert True is True">tests\test_performance.py:339: in test_memory_leak_test
    assert results["has_leak"] is True
E   assert True is True</failure></testcase><testcase classname="tests.test_performance" name="test_memory_leak_test_no_leak" time="0.108" /><testcase classname="tests.test_performance" name="test_performance_metric_dataclass" time="0.003" /><testcase classname="tests.test_performance" name="test_monitor_cleanup" time="0.005" /><testcase classname="tests.test_performance" name="test_monitoring_intervals[0.1]" time="0.205" /><testcase classname="tests.test_ocr" name="test_get_all_text" time="1.438"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">tests\test_ocr.py:88: in test_get_all_text
    texts = ocr_engine.get_all_text(mock_element)
pyui_automation\ocr.py:184: in get_all_text
    element_x, element_y = element.location
E   ValueError: not enough values to unpack (expected 2, got 0)</failure></testcase><testcase classname="tests.test_performance" name="test_monitoring_intervals[0.5]" time="1.005" /><testcase classname="tests.test_performance" name="test_monitoring_intervals[1.0]" time="2.006" /><testcase classname="tests.test_ocr" name="test_recognize_text" time="1.290" /><testcase classname="tests.test_ocr" name="test_recognize_text_with_preprocessing" time="1.256" /><testcase classname="tests.test_ocr" name="test_paddle_ocr_not_available" time="0.006"><failure message="AssertionError: Regex pattern did not match.&#10; Regex: 'PaddleOCR not available'&#10; Input: 'PaddleOCR is not available. Please install paddleocr package to use text recognition features.'">tests\test_ocr.py:129: in test_paddle_ocr_not_available
    engine.recognize_text(np.zeros((100, 100, 3), dtype=np.uint8))
pyui_automation\ocr.py:56: in recognize_text
    raise RuntimeError("PaddleOCR is not available. Please install paddleocr package to use text recognition features.")
E   RuntimeError: PaddleOCR is not available. Please install paddleocr package to use text recognition features.

During handling of the above exception, another exception occurred:
tests\test_ocr.py:128: in test_paddle_ocr_not_available
    with pytest.raises(RuntimeError, match="PaddleOCR not available"):
E   AssertionError: Regex pattern did not match.
E    Regex: 'PaddleOCR not available'
E    Input: 'PaddleOCR is not available. Please install paddleocr package to use text recognition features.'</failure></testcase><testcase classname="tests.test_performance" name="test_concurrent_monitoring" time="0.307" /><testcase classname="tests.test_performance" name="test_error_handling" time="0.005"><failure message="assert 2 == 1&#10; +  where 2 = len([PerformanceMetric(timestamp=0.0, cpu_usage=0.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0009999275207519531, cpu_usage=0.0, memory_usage=1, response_time=0.0)])&#10; +    where [PerformanceMetric(timestamp=0.0, cpu_usage=0.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0009999275207519531, cpu_usage=0.0, memory_usage=1, response_time=0.0)] = &lt;pyui_automation.performance.PerformanceMonitor object at 0x000002C3CD1CC9E0&gt;.metrics">tests\test_performance.py:427: in test_error_handling
    assert len(perf_monitor.metrics) == 1
E   assert 2 == 1
E    +  where 2 = len([PerformanceMetric(timestamp=0.0, cpu_usage=0.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0009999275207519531, cpu_usage=0.0, memory_usage=1, response_time=0.0)])
E    +    where [PerformanceMetric(timestamp=0.0, cpu_usage=0.0, memory_usage=1, response_time=0.0), PerformanceMetric(timestamp=0.0009999275207519531, cpu_usage=0.0, memory_usage=1, response_time=0.0)] = &lt;pyui_automation.performance.PerformanceMonitor object at 0x000002C3CD1CC9E0&gt;.metrics</failure></testcase><testcase classname="tests.test_performance" name="test_resource_threshold_alerts" time="0.005" /><testcase classname="tests.test_performance" name="test_detect_regression" time="0.907" /><testcase classname="tests.test_ocr" name="test_set_languages" time="2.582" /><testcase classname="tests.test_ocr" name="test_set_languages_empty_list" time="1.262" /><testcase classname="tests.test_ocr" name="test_recognize_text_from_path" time="1.314" /><testcase classname="tests.test_ocr" name="test_recognize_text_from_pathlib" time="1.282" /><testcase classname="tests.test_ocr" name="test_recognize_text_invalid_path" time="1.263"><failure message="cv2.error: OpenCV(4.10.0) D:\a\opencv-python\opencv-python\opencv\modules\imgproc\src\color.cpp:196: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'">tests\test_ocr.py:167: in test_recognize_text_invalid_path
    ocr_engine.recognize_text("nonexistent_image.png")
pyui_automation\ocr.py:65: in recognize_text
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
E   cv2.error: OpenCV(4.10.0) D:\a\opencv-python\opencv-python\opencv\modules\imgproc\src\color.cpp:196: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'</failure></testcase><testcase classname="tests.test_ocr" name="test_recognize_text_invalid_image" time="1.312"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">tests\test_ocr.py:171: in test_recognize_text_invalid_image
    with pytest.raises(ValueError):
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.test_ocr" name="test_find_text_with_confidence" time="1.284"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">tests\test_ocr.py:176: in test_find_text_with_confidence
    locations = ocr_engine.find_text_location(mock_element, "Sample Text", confidence_threshold=0.9)
pyui_automation\ocr.py:157: in find_text_location
    element_x, element_y = element.location
E   ValueError: not enough values to unpack (expected 2, got 0)</failure></testcase><testcase classname="tests.test_ocr" name="test_find_text_no_match" time="1.253"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">tests\test_ocr.py:183: in test_find_text_no_match
    locations = ocr_engine.find_text_location(mock_element, "Nonexistent Text")
pyui_automation\ocr.py:157: in find_text_location
    element_x, element_y = element.location
E   ValueError: not enough values to unpack (expected 2, got 0)</failure></testcase><testcase classname="tests.test_ocr" name="test_get_all_text_with_confidence" time="1.250"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">tests\test_ocr.py:189: in test_get_all_text_with_confidence
    texts = ocr_engine.get_all_text(mock_element, confidence_threshold=0.95)
pyui_automation\ocr.py:184: in get_all_text
    element_x, element_y = element.location
E   ValueError: not enough values to unpack (expected 2, got 0)</failure></testcase><testcase classname="tests.test_ocr" name="test_get_all_text_no_results" time="1.269" /><testcase classname="tests.test_ocr" name="test_preprocess_image" time="1.400"><failure message="assert (100, 100) == (100, 100, 3)&#10;  &#10;  Right contains one more item: #x1B[0m#x1B[94m3#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  Use -v to get more diff">tests\test_ocr.py:208: in test_preprocess_image
    assert processed.shape == test_image.shape
E   assert (100, 100) == (100, 100, 3)
E     
E     Right contains one more item: #x1B[0m#x1B[94m3#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E     Use -v to get more diff</failure></testcase><testcase classname="tests.test_ocr" name="test_preprocess_image_grayscale" time="1.266"><failure message="assert 2 == 3&#10; +  where 2 = len((100, 100))&#10; +    where (100, 100) = array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8).shape">tests\test_ocr.py:215: in test_preprocess_image_grayscale
    assert len(processed.shape) == 3  # Should be converted to RGB
E   assert 2 == 3
E    +  where 2 = len((100, 100))
E    +    where (100, 100) = array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8).shape</failure></testcase><testcase classname="tests.test_ocr" name="test_read_text_partial_match" time="1.254" /><testcase classname="tests.test_ocr" name="test_read_text_case_sensitive" time="1.305" /><testcase classname="tests.test_ocr" name="test_read_text_exact_match" time="1.310" /><testcase classname="tests.test_ocr" name="test_multiple_language_recognition" time="2.487"><failure message="AssertionError">tests\test_ocr.py:237: in test_multiple_language_recognition
    text = ocr_engine.read_text(mock_element, "Sample")
pyui_automation\ocr.py:239: in read_text
    result = self._paddle_ocr.ocr(image, cls=True)
.venv\Lib\site-packages\paddleocr\paddleocr.py:729: in ocr
    assert isinstance(img, (np.ndarray, list, str, bytes))
E   AssertionError</failure></testcase><testcase classname="tests.test_ocr" name="test_recognize_text_different_dtypes[uint8]" time="1.315" /><testcase classname="tests.test_ocr" name="test_recognize_text_different_dtypes[float32]" time="1.251" /><testcase classname="tests.test_ocr" name="test_recognize_text_different_dtypes[float64]" time="1.265" /><testcase classname="tests.test_ocr" name="test_concurrent_ocr_operations" time="1.244" /><testcase classname="tests.test_ocr" name="test_memory_cleanup" time="1.654" /></testsuite></testsuites>