"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = str(Path(__file__).parent.parent)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from pyui_automation.core.services.backend_factory import BackendFactory
from pyui_automation.core.session import AutomationSession
from pyui_automation.locators.windows import WindowsLocator


def test_backend_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è backend'–∞"""
    try:
        backend = BackendFactory.create_backend('windows')
        assert backend is not None
        assert backend.is_initialized()
        print("‚úÖ Backend —Å–æ–∑–¥–∞–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.skip(f"Backend –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω: {e}")


def test_locator_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è locator'–∞"""
    try:
        backend = BackendFactory.create_backend('windows')
        locator = WindowsLocator(backend)
        assert locator is not None
        print("‚úÖ Locator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.skip(f"Locator –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω: {e}")


def test_session_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è session"""
    try:
        backend = BackendFactory.create_backend('windows')
        locator = WindowsLocator(backend)
        session = AutomationSession(backend, locator)
        assert session is not None
        print("‚úÖ Session —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.skip(f"Session –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω: {e}")


def test_backend_methods():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ backend'–∞"""
    try:
        backend = BackendFactory.create_backend('windows')
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        screen_size = backend.get_screen_size()
        assert isinstance(screen_size, tuple)
        assert len(screen_size) == 2
        assert screen_size[0] > 0 and screen_size[1] > 0
        print(f"‚úÖ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω: {screen_size}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        active_window = backend.get_active_window()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {active_window}")
        
    except Exception as e:
        pytest.skip(f"–ú–µ—Ç–æ–¥—ã backend'–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {e}")


def test_session_methods():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ session"""
    try:
        backend = BackendFactory.create_backend('windows')
        locator = WindowsLocator(backend)
        session = AutomationSession(backend, locator)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ session
        screen_size = session.get_screen_size()
        assert isinstance(screen_size, tuple)
        assert len(screen_size) == 2
        print(f"‚úÖ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ session: {screen_size}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ session
        active_window = session.get_active_window()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ session: {active_window}")
        
    except Exception as e:
        pytest.skip(f"–ú–µ—Ç–æ–¥—ã session –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    
    test_backend_creation()
    test_locator_creation()
    test_session_creation()
    test_backend_methods()
    test_session_methods()
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!") 